<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%-- 解析dll类库 --%>
<%@ Assembly Name="CodeSmith" Path="../../../libs" %>
<%-- 导入命名空间 --%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith" %>
<%-- 模板参数 --%>
<%@ Property Name="AbpApplicationNamespace" Type="System.String"  Category="Namespace" Optional="False" %>
<%@ Property Name="Entity" Type="CodeSmith.AbpEntity" Category="Data" Optional="False" %> 

using System;
using System.Collections.Generic;
using Abp.Application.Services.Dto;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;

// ReSharper disable once CheckNamespace
namespace <%= AbpApplicationNamespace %>
{
    public partial class <%= Entity.ClassName.ToSafeName() %>Dto
    {
        public <%= Entity.ClassName.ToSafeName() %>Dto()
        {
<% foreach(var p in Entity.Properties.Where(p => !string.IsNullOrEmpty(p.Default))) { %>
<% if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysdatetime|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.Now;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.UtcNow;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysdatetime|sysdatetimeoffset|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.Now;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.UtcNow;
<% } else if(p.SystemType == typeof(Int16) || p.SystemType == typeof(Int32) || p.SystemType == typeof(Int64) || p.SystemType == typeof(byte)) { %>
            <%= p.PropertyName.ToSafeName() %> = <%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(Decimal) || p.SystemType == typeof(Single) || p.SystemType == typeof(Double)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= p.SystemType %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(string)) { %>
            <%= p.PropertyName.ToSafeName() %> = "<%= Regex.Replace(p.Default, @"[\(\)']", "").Trim() %>";
<% } else if(p.SystemType == typeof(bool) && p.Default.Contains("1")) { %>
            <%= p.PropertyName.ToSafeName() %> = true;
<% } // defaults%>
<% } // foreach %>
        }        
    }
}

