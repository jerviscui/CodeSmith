<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%-- 解析dll类库 --%>
<%@ Assembly Name="CodeSmith" Path="../../../libs" %>
<%-- 导入命名空间 --%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith" %>
<%-- 模板参数 --%>
<%@ Property Name="ContextEntity" Type="CodeSmith.EntityContext<AbpEntity,AbpEntityProperty>"  %>
<%@ Property Name="AbpEntityFrameworkNamespace" Type="System.String"  %>
<%@ Property Name="AbpCoreNamespace" Type="System.String"  %>
<%@ Property Name="ContextEntityClassName" Type="System.String" Category="2.Class" Optional="True" %>
//------------------------------------------------------------------------------
// <autogenerated>
//     此代码是由 CodeSmith 模板生成的。
//
//     做不该文件的修改内容。更改此
//     如果重新生成代码，文件将会丢失。
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.Entity;
using Abp.EntityFramework;
using <%=AbpCoreNamespace%>;

// ReSharper disable once CheckNamespace
namespace <%= AbpEntityFrameworkNamespace %>
{
    public partial class <%= ContextEntityClassName %> : AbpDbContext
    {
        /* NOTE: 
         *   Setting "Default" to base class helps us when working migration commands on Package Manager Console.
         *   But it may cause problems when working Migrate.exe of EF. If you will apply migrations on command line, do not
         *   pass connection string name to base classes. ABP works either way.
         */
        public <%= ContextEntityClassName %>()
            : base("Default")
        {
            InitializeContext();
        }

        /* NOTE:
         *   This constructor is used by ABP to pass connection string defined in QdCaseDataModule.PreInitialize.
         *   Notice that, actually you will not directly create an instance of QdCaseDbContext since ABP automatically handles it.
         */
        public <%= ContextEntityClassName %>(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            InitializeContext();     
        }

<% foreach(AbpEntity entity in ContextEntity.Entities) { %>
        public DbSet<<%= entity.ClassName.ToSafeName() %>> <%= entity.ContextName.ToSafeName() %> { get; set; }
<% } // foreach %>

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
<% foreach(AbpEntity entity in ContextEntity.Entities) { %>
            modelBuilder.Configurations.Add(new <%= entity.MappingName.ToSafeName() %>());
<% } // foreach %>

            InitializeMapping(modelBuilder);

	        base.OnModelCreating(modelBuilder);
        }

        partial void InitializeContext();
        partial void InitializeMapping(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}