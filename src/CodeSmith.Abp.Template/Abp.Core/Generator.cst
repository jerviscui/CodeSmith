<%@ Template Language="C#" TargetLanguage="Text" Debug="True" OutputType="None" %>
<%-- 解析dll类库 --%>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith" Path="../../../libs" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%-- 导入命名空间 --%>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.CustomProperties" %>
<%@ Import Namespace="CodeSmith" %>
<%-- 模板参数 --%>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.SchemaSelector" Category="1.Database"  Description="源数据库。" %>
<%-- 模板参数 类名--%>
<%@ Property Name="AbpCoreNamespace" Type="System.String" Category="2.Class"%>
<%-- 模板参数 路径--%>
<%@ Property Name="AbpCoreDirectory" Category="3.Output" Type="System.String" Default=".\" Optional="True "Description="保存文件路径。" 
             Editor="System.Windows.Forms.Design.FolderNameEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" %>
<%-- 模板参数 命名规则--%>
<%@ Property Name="TableNaming" Type="CodeSmith.TableNaming" Category="4.Hints" Default="Singular" Description="表类名的命名方式。" %>
<%@ Property Name="EntityNaming" Type="CodeSmith.EntityNaming" Category="4.Hints" Default="Singular" Description="实体类名的命名方式。" %>
<%@ Property Name="RelationshipNaming" Type="CodeSmith.RelationshipNaming" Category="4.Hints" Default="Plural" Description="映射类名的命名方式。" %>
<%@ Property Name="ContextNaming" Type="CodeSmith.ContextNaming" Category="4.Hints" Default="Plural" Description="数据上下文类名方式。" %>
<%@ Property Name="CleanExpressions" Type="CodeSmith.CustomProperties.StringCollection" Category="5.Customization" Default="^(sp|tbl|udf|vw)_" Optional="True" Description="正则表达式列表清理表，视图和列名。" %>
<%@ Property Name="IncludeViews" Type="Boolean" Category="5.Customization" Default="False" Optional="True" Description="是否过滤视图。" %>
<%@ Property Name="RenameMapping" Type="CodeSmith.CustomProperties.NameValueCollection" Category="5.Customization" Default="" Optional="True" Description="名称值对自定义重命名。名称是原来的名字，值是新的名称。" %>
<%@ Property Name="PropertyEnum" Type="System.Collections.Generic.List<EnumSettings>" Category="5.Customization" Default="" Optional="True" %>
<%-- 模板--%>
<%@ Register Name="EntityEditabledClass" Template="Abp.Core.Entity.Editable.cst" MergeProperties="False" %>
<%@ Register Name="EntityGeneratedClass" Template="Abp.Core.Entity.Generated.cst" MergeProperties="False" %>
<%@ Register Name="IRepositoryEditabledClass" Template="Abp.Core.IRepository.Editable.cst" MergeProperties="False" %>
<%@ Register Name="IRepositoryGeneratedClass" Template="Abp.Core.IRepository.Generated.cst" MergeProperties="False" %>
<%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();
GeneratorCode();
%>
<script runat="template">
public void GeneratorCode()
{
    Stopwatch watch = Stopwatch.StartNew();
    string outputDirectory = Path.GetFullPath(AbpCoreDirectory);

    if (!Directory.Exists(outputDirectory))
        Directory.CreateDirectory(outputDirectory);

    if (SourceDatabase != null)
    {
        this.Progress.MaximumValue = (SourceDatabase.Tables.Count * 3) + 1;
        this.Progress.Step = 1;
    }
    
    GeneratorSettings generatorSettings = new GeneratorSettings();
    generatorSettings.TableNaming = TableNaming;
    generatorSettings.EntityNaming = EntityNaming;
    generatorSettings.RelationshipNaming = RelationshipNaming;
    generatorSettings.ContextNaming = ContextNaming;
    
    generatorSettings.IncludeViews = IncludeViews;
    
    if (CleanExpressions != null)
        foreach(string s in CleanExpressions)
          if (!string.IsNullOrEmpty(s))
            generatorSettings.CleanExpressions.Add(s);

    if (RenameMapping != null)
        foreach(NameValueEntry pair in RenameMapping)
            generatorSettings.RenameRules[pair.Key] = pair.Value;
        
    if (PropertyEnum != null)
        foreach(EnumSettings pair in PropertyEnum)        
            generatorSettings.EnumTyps.Add(pair);
        
    UniqueNamer uniqueNamer = new UniqueNamer();
    TemplateContent templateContent = new TemplateContent(generatorSettings, uniqueNamer);
    AbpDbContentTemplate abpDbContentTemplate = new AbpDbContentTemplate(templateContent);  
        
    EntityContext<AbpEntity, AbpEntityProperty> context = abpDbContentTemplate.GetAndCreate(SourceDatabase);
    
    Generator.CreateMultipleEntityClass<EntityGeneratedClass,EntityEditabledClass,AbpEntity, AbpEntityProperty>(context,
        this,
        entity => entity.ClassName.ToPluralName() + @"\" + entity.ClassName.ToSafeName() + ".cs",
        entity => entity.ClassName.ToPluralName() + @"\" + entity.ClassName.ToSafeName() + ".cs",
        outputDirectory);
        
//    Generator.CreateMultipleEntityClass<IRepositoryGeneratedClass,IRepositoryEditabledClass,AbpEntity, AbpEntityProperty>(context,
//        this,
//        entity => entity.ClassName + @"\I" + entity.ClassName.ToSafeName() + "Repository.Generated.cs",
//        entity => entity.ClassName + @"\I" + entity.ClassName.ToSafeName() + "Repository.cs",
//        outputDirectory);
        
    watch.Stop();
    Response.WriteLine("Generate Time: " + watch.ElapsedMilliseconds + " ms");
}
</script>