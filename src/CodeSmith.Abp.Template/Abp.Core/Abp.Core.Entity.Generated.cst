<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%-- 解析dll类库 --%>
<%@ Assembly Name="CodeSmith" Path="../../../libs" %>
<%-- 导入命名空间 --%>
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith" %>
<%-- 模板参数 --%>
<%@ Property Name="Entity" Type="CodeSmith.AbpEntity"  %>
<%@ Property Name="AbpCoreNamespace" Type="System.String"  %>
<%
//System.Diagnostics.Debugger.Launch();
//System.Diagnostics.Debugger.Break();
%>
using System;
using System.Collections.Generic;
using System.Text;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;

namespace <%= AbpCoreNamespace %>.<%= Entity.ClassName.ToPluralName() %>
{
    /// <summary>
    /// <%= Entity.Description %>
    /// </summary> 
    public class <%= Entity.ClassName.ToSafeName() %><%= Entity.PrimaryKey!=null? " : " + (Entity.PrimaryKey.SystemType.ToType() == "int" ? "FullAuditedEntity" : "FullAuditedEntity<" + Entity.PrimaryKey.SystemType.ToType() + ">") : "" %><%--<%= Entity.Inherited  %>--%>
    {
        public <%= Entity.ClassName.ToSafeName() %>()
        {
<% foreach(var p in Entity.Properties.Where(p => !string.IsNullOrEmpty(p.Default))) { %>
<% if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysdatetime|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.Now;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.UtcNow;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysdatetime|sysdatetimeoffset|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.Now;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.UtcNow;
<% } else if(p.SystemType == typeof(Int16) || p.SystemType == typeof(Int32) || p.SystemType == typeof(Int64) || p.SystemType == typeof(byte)) { %>
            <%= p.PropertyName.ToSafeName() %> = <%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(Decimal) || p.SystemType == typeof(Single) || p.SystemType == typeof(Double)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= p.SystemType %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(string)) { %>
            <%= p.PropertyName.ToSafeName() %> = "<%= Regex.Replace(p.Default, @"[\(\)']", "").Trim() %>";
<% } else if(p.SystemType == typeof(bool) && p.Default.Contains("1")) { %>
            <%= p.PropertyName.ToSafeName() %> = true;
<% } // defaults%>
<% } // foreach %>
<% foreach(var r in Entity.Relationships.Where(e => e.ThisCardinality == Cardinality.Many)) { %>
            <%= r.ThisPropertyName.ToSafeName() %> = new List<<%= r.OtherEntity.ToSafeName() %>>();
<% } // foreach %>
        }
        
        <%--public bool IsTransient()
        {
            return EqualityComparer<<%= Entity.PrimaryKey!=null?Entity.PrimaryKey.SystemType.ToType():"int" %>>.Default.Equals(this.<%= Entity.PrimaryKey!=null?Entity.PrimaryKey.PropertyName:"Id" %>, default(<%= Entity.PrimaryKey!=null?Entity.PrimaryKey.SystemType.ToType():"int" %>));
        }--%>

<% foreach(var p in Entity.Properties) { %>
        <%if(p.IsEnum){%>
        /// <summary>
        /// <%= p.Explain %>
        /// </summary>    
        public <%= p.EnumType.ToNullableType(p.IsNullable == true) %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <% }else{%> 
        /// <summary>
        /// <%= p.Explain %>
        /// </summary>    
        public <%= p.SystemType.ToNullableType(p.IsNullable == true) %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <%}%>                      
<% } // foreach %>

<% foreach(var r in Entity.Relationships) { %>
<% if(r.ThisCardinality == Cardinality.Many) { %>
        public virtual ICollection<<%= r.OtherEntity.ToSafeName() %>> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
<% } else { %>
        public virtual <%= r.OtherEntity.ToSafeName() %> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
<% } %>
<% } // foreach %>
    }
}