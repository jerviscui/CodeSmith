using System;
using SchemaExplorer;

// ReSharper disable once CheckNamespace
namespace CodeSmith
{
    public class PropertyTemplate<TEntity,TProperty> : SingleTemplate<TProperty, DataObjectBase>
        where TProperty : Property, new()
        where TEntity : Entity<TProperty>
    {
        protected readonly TemplateContent Content;

        public TEntity Entity { get; set; }

        public PropertyTemplate(TemplateContent content)
        {
            Content = content;
        }

        public override TProperty GetAndCreate(DataObjectBase dataObjectBase)
        {
            if (Entity == null)
                throw new ArgumentNullException("dataObjectBase");

            TProperty property = Entity.Properties.ByColumn(dataObjectBase.Name);

            if (property != null)
            {
                return property;
            }
            property = new TProperty { ColumnName = dataObjectBase.Name };       

            string propertyName = Content.ToPropertyName(Entity.ClassName, dataObjectBase.Name);
            propertyName = Content.UniqueNamer.UniqueName(Entity.ClassName, propertyName);

            property.PropertyName = propertyName;

            property.DataType = dataObjectBase.DataType;
            property.SystemType = dataObjectBase.SystemType;
            property.NativeType = dataObjectBase.NativeType;

            property.IsNullable = dataObjectBase.AllowDBNull;

            property.IsIdentity = Content.IsIdentity(dataObjectBase);
            property.IsRowVersion = Content.IsRowVersion(dataObjectBase);
            property.IsAutoGenerated = Content.IsDbGenerated(dataObjectBase);

            property.Default = Content.GetDefaultValue(dataObjectBase);

            property.Explain = dataObjectBase.Description ?? dataObjectBase.FullName;

            if (property.SystemType == typeof(string)
              || property.SystemType == typeof(byte[]))
            {
                property.MaxLength = dataObjectBase.Size;
            }

            if (property.SystemType == typeof(float)
              || property.SystemType == typeof(double)
              || property.SystemType == typeof(decimal))
            {
                property.Precision = dataObjectBase.Precision;
                property.Scale = dataObjectBase.Scale;
            }

            var columnSchema = dataObjectBase as ColumnSchema;
            if (columnSchema != null)
            {
                property.IsPrimaryKey = columnSchema.IsPrimaryKeyMember;
                property.IsForeignKey = columnSchema.IsForeignKeyMember;
                if (columnSchema.IsUnique)
                    property.IsUnique = true;
            }

            property.IsProcessed = true;
            return property;
        }
    }
}
