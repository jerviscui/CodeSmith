using CodeSmith.Model;
using SchemaExplorer;

namespace CodeSmith
{
    public class EFPropertyTemplate : SingleTemplate<Property, DataObjectBase>
    {
        private readonly Entity _entity;
        private readonly TemplateContent _content;

        public EFPropertyTemplate( Entity entity, TemplateContent content)
        {          
            _entity = entity;
            _content = content;
        }

        public override Property Get(DataObjectBase dataObjectBase)
        {
            Property property = new Property();
            string propertyName = _content.ToPropertyName(_entity.ClassName, dataObjectBase.Name);
            propertyName = _content.UniqueNamer.UniqueName(_entity.ClassName, propertyName);

            property.PropertyName = propertyName;

            property.DataType = dataObjectBase.DataType;
            property.SystemType = dataObjectBase.SystemType;
            property.NativeType = dataObjectBase.NativeType;

            property.IsNullable = dataObjectBase.AllowDBNull;

            property.IsIdentity = _content.IsIdentity(dataObjectBase);
            property.IsRowVersion = _content.IsRowVersion(dataObjectBase);
            property.IsAutoGenerated = _content.IsDbGenerated(dataObjectBase);

            property.Default = _content.GetDefaultValue(dataObjectBase);

            property.Explain = dataObjectBase.Description ?? dataObjectBase.FullName;

            if (property.SystemType == typeof(string)
              || property.SystemType == typeof(byte[]))
            {
                property.MaxLength = dataObjectBase.Size;
            }

            if (property.SystemType == typeof(float)
              || property.SystemType == typeof(double)
              || property.SystemType == typeof(decimal))
            {
                property.Precision = dataObjectBase.Precision;
                property.Scale = dataObjectBase.Scale;
            }

            var columnSchema = dataObjectBase as ColumnSchema;
            if (columnSchema != null)
            {
                property.IsPrimaryKey = columnSchema.IsPrimaryKeyMember;
                property.IsForeignKey = columnSchema.IsForeignKeyMember;
                if (columnSchema.IsUnique)
                    property.IsUnique = true;
            }

            property.IsProcessed = true;

            return property;
        }

     
    }
}
