<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeSmith.Engine</name>
    </assembly>
    <members>
        <member name="M:CodeSmith.Engine.RegisteredContent.IsOriginalContent">
            <summary>
            Checks to see if the in memory content is the same as the original source content.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Engine.MergeContext.OutputFile">
            <summary>
            The file path that is being modified.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MergeContext.OutputContent">
            <summary>
            The content that the template generated.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MergeContext.SourceContent">
            <summary>
            The previous content waiting to be merged.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.SetToken(CodeSmith.Engine.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.SetToken(CodeSmith.Engine.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReader.Close">
            <summary>
            Changes the <see cref="T:CodeSmith.Engine.Json.JsonReader.State"/> to Closed. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the reader is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the reader is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when reading JSON.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.ValueType">
            <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Start">
            <summary>
            The Read method has not been called.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Closed">
            <summary>
            The Close method has been called.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Constructor">
            <summary>
            Reader in a constructor.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The stream.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The reader.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>
            A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonReader.Close">
            <summary>
            Changes the <see cref="T:CodeSmith.Engine.Json.JsonReader.State"/> to Closed.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.#ctor">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a Json object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current Json object or array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteToken(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:CodeSmith.Engine.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteToken(CodeSmith.Engine.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:CodeSmith.Engine.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteEnd(CodeSmith.Engine.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriter.SetWriteState(CodeSmith.Engine.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the JsonWriter,
            </summary>
            <param name="token">The JsonToken being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader"/> should be closed when the writer is closed.
            </summary>
            <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader"/> when
            the writer is closed; otherwise false. The default is true.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteEnd(CodeSmith.Engine.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified"/> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind"/> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.BinaryConverter">
            <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConverter.GetSchema">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.
            </summary>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of the JSON produced by the JsonConverter.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BinaryConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BinaryConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BinaryConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:CodeSmith.Engine.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BsonObjectIdConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BsonObjectIdConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1">
            <summary>
            Create a custom object
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.DataSetConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataSet"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataSetConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataSetConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataSetConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.DataTableConverter">
            <summary>
            Converts a <see cref="T:System.Data.DataTable"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataTableConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataTableConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DataTableConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.EntityKeyMemberConverter">
            <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.EntityKeyMemberConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.EntityKeyMemberConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.ExpandoObjectConverter">
            <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.ExpandoObjectConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.ExpandoObjectConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.ExpandoObjectConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.JavaScriptDateTimeConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.JavaScriptDateTimeConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.KeyValuePairConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.KeyValuePairConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.RegexConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.RegexConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.StringEnumConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.StringEnumConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. "1.2.3.4").
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.VersionConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.VersionConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Converters.XmlNodeConverter">
            <summary>
            Converts XML to and from JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.XmlNodeConverter.WriteJson(CodeSmith.Engine.Json.JsonWriter,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> to write to.</param>
            <param name="serializer">The calling serializer.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.XmlNodeConverter.ReadJson(CodeSmith.Engine.Json.JsonReader,System.Type,System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
            <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
            <param name="attributeName">Attribute name to test.</param>
            <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
            <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
            <param name="valueType">Type of the value.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
            <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
            <value>The name of the deserialize root element.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
            <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
            <value><c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Converters.XmlNodeConverter.OmitRootObject">
            <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
            <value><c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:CodeSmith.Engine.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateParseHandling.DateTimeOffset">
            <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:CodeSmith.Engine.Json.DateParseHandling.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class"/>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:CodeSmith.Engine.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, null for a <see cref="T:System.Nullable`1"/> property.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:CodeSmith.Engine.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:CodeSmith.Engine.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:CodeSmith.Engine.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:CodeSmith.Engine.Json.JsonTextWriter.Indentation"/> and <see cref="P:CodeSmith.Engine.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonConvert">
            <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.DateTime,CodeSmith.Engine.Json.DateFormatHandling,CodeSmith.Engine.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:CodeSmith.Engine.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.DateTimeOffset)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.DateTimeOffset,CodeSmith.Engine.Json.DateFormatHandling)">
            <summary>
            Converts the <see cref="T:System.DateTimeOffset"/> to its JSON string representation using the <see cref="T:CodeSmith.Engine.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,CodeSmith.Engine.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,CodeSmith.Engine.Json.Formatting,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,CodeSmith.Engine.Json.Formatting,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObject(System.Object,System.Type,CodeSmith.Engine.Json.Formatting,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:CodeSmith.Engine.Json.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObjectAsync(System.Object)">
            <summary>
            Asynchronously serializes the specified object to a JSON string.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObjectAsync(System.Object,CodeSmith.Engine.Json.Formatting)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeObjectAsync(System.Object,CodeSmith.Engine.Json.Formatting,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously serializes the specified object to a JSON string using formatting and a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            Serialization will happen on a new thread.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="settings">The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
            <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject(System.String,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the Json string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject``1(System.String,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject``1(System.String,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject(System.String,System.Type,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObject(System.String,System.Type,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObjectAsync``1(System.String,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObjectAsync(System.String)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously deserializes the JSON to the specified .NET type using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            Deserialization will happen on a new thread.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.PopulateObject(System.String,System.Object,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Asynchronously populates the object with values from the JSON string using <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
            <returns>
            A task that represents the asynchronous populate operation.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
            <summary>
            Serializes the XML node to a JSON string.
            </summary>
            <param name="node">The node to serialize.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,CodeSmith.Engine.Json.Formatting)">
            <summary>
            Serializes the XML node to a JSON string using formatting.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,CodeSmith.Engine.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the XML node to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XmlNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXmlNode(System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XmlNode</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,CodeSmith.Engine.Json.Formatting)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting.
            </summary>
            <param name="node">The node to convert to JSON.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,CodeSmith.Engine.Json.Formatting,System.Boolean)">
            <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode"/> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject"/> is <c>true</c>.
            </summary>
            <param name="node">The node to serialize.</param>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="omitRootObject">Omits writing the root object.</param>
            <returns>A JSON string of the XNode.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXNode(System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string.
            </summary>
            <param name="value">The JSON string.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
            <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode"/> from a JSON string nested in a root elment specified by <paramref name="deserializeRootElementName"/>
            and writes a .NET array attribute for collections.
            </summary>
            <param name="value">The JSON string.</param>
            <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
            <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
            <returns>The deserialized XNode</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:CodeSmith.Engine.Json.JsonConvert"/>,
            and <see cref="M:CodeSmith.Engine.Json.Linq.JToken.ToObject``1"/> and <see cref="M:CodeSmith.Engine.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> with
            <see cref="M:CodeSmith.Engine.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to use the specified <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the converter.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the type of the converter.
            </summary>
            <value>The type of the converter.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonObjectAttribute.#ctor(CodeSmith.Engine.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <returns>
            A new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Create(CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will not use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will not use default settings.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will use default settings.
            </summary>
            <returns>
            A new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.CreateDefault(CodeSmith.Engine.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will use default settings.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> instance using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/>.
            The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> will use default settings.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Populate(CodeSmith.Engine.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Deserialize(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Deserialize``1(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Deserialize(CodeSmith.Engine.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the Json structure contained by the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Serialize(CodeSmith.Engine.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:CodeSmith.Engine.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:CodeSmith.Engine.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializer.Serialize(CodeSmith.Engine.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>. 
            </summary>
            <param name="jsonWriter">The <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> used to write the Json structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="E:CodeSmith.Engine.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.NullValueHandling">
            <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a collection <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>The reference resolver.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatting when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:CodeSmith.Engine.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Get or set how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Get or set how <see cref="T:System.DateTime"/> time zones are handling during serialization and deserialization.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.DateTimeOffset"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.Close">
            <summary>
            Changes the state to closed. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter"/>. 
            </summary>
            <param name="textWriter">The <c>TextWriter</c> to write to.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteEnd(CodeSmith.Engine.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes out the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:CodeSmith.Engine.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="T:CodeSmith.Engine.Json.Formatting"/> is set to <c>Formatting.Indented</c>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonToken">
            <summary>
            Specifies the type of Json token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:CodeSmith.Engine.Json.JsonReader"/> if a <see cref="M:CodeSmith.Engine.Json.JsonReader.Read"/> method has not been called. 
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonValidatingReader">
            <summary>
            Represents a reader that provides <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> validation.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.#ctor(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="E:CodeSmith.Engine.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.JsonReader"/> used to construct this <see cref="T:CodeSmith.Engine.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.JsonWriterException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:CodeSmith.Engine.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the ancestors of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:CodeSmith.Engine.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the descendants of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection with the given key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the values of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every node in the source collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{CodeSmith.Engine.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.DeepEquals(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to compare.</param>
            <returns>true if the tokens are equal; otherwise false.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Replace(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToString(CodeSmith.Engine.Json.Formatting,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output is formatted.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.DateTimeOffset">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.DateTimeOffset"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Byte[]"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Explicit(CodeSmith.Engine.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Boolean)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Byte)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.SByte)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Int64)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Int16)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.UInt16)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Int32)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.DateTime)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Decimal)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Double)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Single)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.String)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.UInt32)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.UInt64)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Byte[])~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Uri)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.TimeSpan)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Guid)~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~CodeSmith.Engine.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> to <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.CreateReader">
            <summary>
            Creates an <see cref="T:CodeSmith.Engine.Json.JsonReader"/> for this token.
            </summary>
            <returns>An <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.FromObject(System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> from an object using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the value of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates the specified .NET type from the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToObject``1(CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ToObject(System.Type,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Creates the specified .NET type from the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> using the specified <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.ReadFrom(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:CodeSmith.Engine.Json.JsonReader"/> positioned at the token to read into this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.Load(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:CodeSmith.Engine.Json.JsonReader"/> positioned at the token to read into this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</param>
            <returns>
            An <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that matches the object path or a null reference if no matching token is found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects the token that matches the object path.
            </summary>
            <param name="path">
            The object path from the current <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that matches the object path.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:CodeSmith.Engine.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the first child token of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the last child token of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Json.Linq.JContainer.AddingNew"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Json.Linq.JContainer.ListChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Json.Linq.JContainer.CollectionChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the descendant tokens of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates an <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <returns>An <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Json.Linq.JContainer.ListChanged">
            <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Json.Linq.JContainer.AddingNew">
            <summary>
            Occurs before an item is added to the collection.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Json.Linq.JContainer.CollectionChanged">
            <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the first child token of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> containing the last child token of the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.#ctor(CodeSmith.Engine.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Load(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that will be read for the content of the <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text"/>
            </example>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.FromObject(System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.IndexOf(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Insert(System.Int32,CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Add(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Contains(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.CopyTo(CodeSmith.Engine.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JArray.Remove(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.#ctor(CodeSmith.Engine.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JConstructor.Load(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that will be read for the content of the <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token</typeparam>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.IJEnumerable`1"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.#ctor(CodeSmith.Engine.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of this object's properties.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> with the specified name or null.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets an <see cref="T:CodeSmith.Engine.Json.Linq.JEnumerable`1"/> of this object's property values.
            </summary>
            <returns>An <see cref="T:CodeSmith.Engine.Json.Linq.JEnumerable`1"/> of this object's property values.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Load(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that will be read for the content of the <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text"/>
            </example>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JObject"/> with the values of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.FromObject(System.Object,CodeSmith.Engine.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JArray"/> with the values of the specified object</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,CodeSmith.Engine.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Add(System.String,CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>true if item was successfully removed; otherwise, false.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.TryGetValue(System.String,CodeSmith.Engine.Json.Linq.JToken@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns>true if a value was successfully retrieved; otherwise, false.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.OnPropertyChanging(System.String)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Json.Linq.JObject.PropertyChanging"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
            <summary>
            Returns the properties for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the properties for this component instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
            <summary>
            Returns the properties for this instance of a component using the attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptorCollection"/> that represents the filtered properties for this component instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
            <summary>
            Returns a collection of custom attributes for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.AttributeCollection"/> containing the attributes for this object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
            <summary>
            Returns the class name of this instance of a component.
            </summary>
            <returns>
            The class name of the object, or null if the class does not have a name.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
            <summary>
            Returns the name of this instance of a component.
            </summary>
            <returns>
            The name of the object, or null if the object does not have a name.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
            <summary>
            Returns a type converter for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter"/> that is the converter for this object, or null if there is no <see cref="T:System.ComponentModel.TypeConverter"/> for this object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
            <summary>
            Returns the default event for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptor"/> that represents the default event for this object, or null if this object does not have events.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
            <summary>
            Returns the default property for this instance of a component.
            </summary>
            <returns>
            A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the default property for this object, or null if this object does not have properties.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
            <summary>
            Returns an editor of the specified type for this instance of a component.
            </summary>
            <param name="editorBaseType">A <see cref="T:System.Type"/> that represents the editor for this object.</param>
            <returns>
            An <see cref="T:System.Object"/> of the specified type that is the editor for this object, or null if the editor cannot be found.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
            <summary>
            Returns the events for this instance of a component using the specified attribute array as a filter.
            </summary>
            <param name="attributes">An array of type <see cref="T:System.Attribute"/> that is used as a filter.</param>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the filtered events for this component instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
            <summary>
            Returns the events for this instance of a component.
            </summary>
            <returns>
            An <see cref="T:System.ComponentModel.EventDescriptorCollection"/> that represents the events for this component instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns an object that contains the property described by the specified property descriptor.
            </summary>
            <param name="pd">A <see cref="T:System.ComponentModel.PropertyDescriptor"/> that represents the property whose owner is to be found.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the owner of the specified property.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:CodeSmith.Engine.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Json.Linq.JObject.PropertyChanging">
            <summary>
            Occurs when a property value is changing.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JProperty.#ctor(CodeSmith.Engine.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JProperty.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JProperty.Load(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> from a <see cref="T:CodeSmith.Engine.Json.JsonReader"/>. 
            </summary>
            <param name="reader">A <see cref="T:CodeSmith.Engine.Json.JsonReader"/> that will be read for the content of the <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JPropertyDescriptor">
            <summary>
            Represents a view of a <see cref="T:CodeSmith.Engine.Json.Linq.JProperty"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JPropertyDescriptor"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="propertyType">Type of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
            <param name="component">The component to test for reset capability. 
                            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <returns>
            The value of a property for a given component.
            </returns>
            <param name="component">The component with the property for which to retrieve the value. 
                            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">The component with the property value that is to be set. 
                            </param><param name="value">The new value. 
                            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
            <param name="component">The component with the property to be examined for persistence. 
                            </param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.ComponentType">
            <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)"/> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)"/> methods are invoked, the object specified might be an instance of this type.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.IsReadOnly">
            <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <returns>
            true if the property is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.PropertyType">
            <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
            <returns>
            A <see cref="T:System.Type"/> that represents the type of the property.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JPropertyDescriptor.NameHashCode">
            <summary>
            Gets the hash code for the name of the member.
            </summary>
            <value></value>
            <returns>
            The hash code for the name of the member.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(CodeSmith.Engine.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.Equals(CodeSmith.Engine.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj"/> parameter is null.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
            <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject"/> responsible for binding operations performed on this object.
            </summary>
            <param name="parameter">The expression tree representation of the runtime value.</param>
            <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject"/> to bind this object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JValue.CompareTo(CodeSmith.Engine.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not the same type as this instance.
            </exception>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JRaw.#ctor(CodeSmith.Engine.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> class from another <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JRaw.Create(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:CodeSmith.Engine.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenEqualityComparer.Equals(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to compare.</param>
            <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenEqualityComparer.GetHashCode(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is null.</exception>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.#ctor(CodeSmith.Engine.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]"/>.
            </summary>
            <returns>
            A <see cref="T:Byte[]"/> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsString">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
            <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the stream.
            </summary>
            <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.#ctor(CodeSmith.Engine.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:CodeSmith.Engine.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this stream and the underlying stream.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a Json object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a Json array.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteEnd(CodeSmith.Engine.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
            <summary>
            Writes a <see cref="T:System.DateTimeOffset"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTimeOffset"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:Byte[]"/> value.
            </summary>
            <param name="value">The <see cref="T:Byte[]"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being writen.
            </summary>
            <value>The token being writen.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:CodeSmith.Engine.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.MemberSerialization.OptIn">
            <summary>
            Only members must be marked with <see cref="T:CodeSmith.Engine.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:CodeSmith.Engine.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver"/> to false.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class"/>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example"/>
            </example>
        </member>
        <member name="F:CodeSmith.Engine.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References"/>       
            </example>
        </member>
        <member name="F:CodeSmith.Engine.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:CodeSmith.Engine.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.Extensions">
            <summary>
            Contains the JSON schema extension methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.Extensions.IsValid(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Schema.JsonSchema)">
            <summary>
            Determines whether the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.Extensions.IsValid(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            Determines whether the <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> is valid.
            </summary>
            <param name="source">The source <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.Extensions.Validate(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Schema.JsonSchema)">
            <summary>
            Validates the specified <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.Extensions.Validate(CodeSmith.Engine.Json.Linq.JToken,CodeSmith.Engine.Json.Schema.JsonSchema,CodeSmith.Engine.Json.Schema.ValidationEventHandler)">
            <summary>
            Validates the specified <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/>.
            </summary>
            <param name="source">The source <see cref="T:CodeSmith.Engine.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.JsonSchema">
            <summary>
            An in-memory representation of a JSON Schema.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.Read(CodeSmith.Engine.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.Read(CodeSmith.Engine.Json.JsonReader,CodeSmith.Engine.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified <see cref="T:CodeSmith.Engine.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:CodeSmith.Engine.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from a string that contains schema JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.Parse(System.String,CodeSmith.Engine.Json.Schema.JsonSchemaResolver)">
            <summary>
            Parses the specified json.
            </summary>
            <param name="json">The json.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.WriteTo(CodeSmith.Engine.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.WriteTo(CodeSmith.Engine.Json.JsonWriter,CodeSmith.Engine.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> using the specified <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read only.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
            <value>A number that the value should be divisble by.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:CodeSmith.Engine.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallow types.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.JsonSchemaException">
            <summary>
            Returns detailed information about the schema exception.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator">
            <summary>
            Generates a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.Generate(System.Type,CodeSmith.Engine.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.Generate(System.Type,CodeSmith.Engine.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver">
            <summary>
            Resolves <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> from an id.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.JsonSchemaType">
            <summary>
            The value types allowed by the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchema"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            Specifies undefined schema Id handling options for the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaGenerator"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.ValidationEventArgs">
            <summary>
            Returns detailed information related to the <see cref="T:CodeSmith.Engine.Json.Schema.ValidationEventHandler"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Schema.ValidationEventHandler">
            <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:CodeSmith.Engine.Json.Schema.ValidationEventArgs"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to resolves a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> to resolves a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class"/>
              <code lang="cs" source="..\Src\CodeSmith.Engine.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example"/>
            </example>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
            <param name="shareCache">
            If set to <c>true</c> the <see cref="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver"/> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:CodeSmith.Engine.Json.Serialization.DefaultContractResolver"/> instances with the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,CodeSmith.Engine.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(CodeSmith.Engine.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonISerializableContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonISerializableContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDynamicContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,CodeSmith.Engine.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:CodeSmith.Engine.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:CodeSmith.Engine.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,CodeSmith.Engine.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:CodeSmith.Engine.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
            <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute"/> attribute when serializing and deserializing types.
            </summary>
            <value>
            	<c>true</c> if the <see cref="T:System.SerializableAttribute"/> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The property name camel cased.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the sepecified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object. </param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object. </param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.DiagnosticsTraceWriter">
            <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener"/> instances.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.DynamicValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.DynamicValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets or sets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ErrorEventArgs.#ctor(System.Object,CodeSmith.Engine.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnDeserialized">
            <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
            <value>The method called immediately after deserialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnDeserializing">
            <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
            <value>The method called during deserialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnSerialized">
            <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
            <value>The method called after serialization of the object graph.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnSerializing">
            <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
            <value>The method called before serialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.OnError">
            <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The method called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:CodeSmith.Engine.Json.JsonConverter"/>.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonDynamicContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonDynamicContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonDynamicContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
            <summary>
            Gets or sets the property name resolver.
            </summary>
            <value>The property name resolver.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonISerializableContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonISerializableContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonISerializableContract.ISerializableCreator">
            <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
            <value>The ISerializable object constructor.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.ConstructorParameters">
            <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.OverrideConstructor">
            <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
            <value>The override constructor.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
            <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
            <value>The parametrized constructor.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
            <value>The numeric order of serialization or deserialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:CodeSmith.Engine.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:CodeSmith.Engine.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:CodeSmith.Engine.Json.JsonConverter"/> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
            <value>A predicate used to determine whether the property should be serialize.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection.GetKeyForItem(CodeSmith.Engine.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection.AddProperty(CodeSmith.Engine.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:CodeSmith.Engine.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:System.Diagnostics.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
            <value>
            The <see cref="T:System.Diagnostics.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:CodeSmith.Engine.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is null or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="list">A sequence in which to locate a value.</param>
            <param name="value">The object to locate in the sequence</param>
            <param name="comparer">An equality comparer to compare values.</param>
            <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <returns>The converted type.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
            <summary>
            Converts the value to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert the value to.</param>
            <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
            <returns>
            	<c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
            <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
            <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.EnumUtils.GetNamesAndValues``1">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
            <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
            <param name="enumType">The enum type to get names and values for.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Json.Utilities.StringUtils.NullEmptyString(System.String)">
            <summary>
            Nulls an empty string.
            </summary>
            <param name="s">The string.</param>
            <returns>Null if the string was null, otherwise the string unchanged.</returns>
        </member>
        <member name="T:CodeSmith.Engine.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:CodeSmith.Engine.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:CodeSmith.Engine.Json.JsonWriter.Close"/> method to put the <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:CodeSmith.Engine.Json.JsonWriter"/> method calls results in an <see cref="T:System.InvalidOperationException"/> being thrown. 
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Closed">
            <summary>
            The <see cref="M:CodeSmith.Engine.Json.JsonWriter.Close"/> method has been called. 
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Object">
            <summary>
            An object is being written. 
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Array">
            <summary>
            A array is being written.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Json.WriteState.Start">
            <summary>
            A write method has not been called.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetGenerator.GenerateSnippet(System.String,System.String,System.String@)">
            <summary>
            Generates the snippet.
            </summary>
            <param name="rawLine">The raw line.</param>
            <param name="targetExtension">The target extension.</param>
            <param name="output">The snippet output.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetGenerator.OutputUsage(System.String,System.String)">
            <summary>
            Outputs the usage.
            </summary>
            <param name="rawLine">The raw line.</param>
            <param name="targetExtension">The target extension.</param>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyReference.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyReference"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyReference.#ctor(Microsoft.Build.Framework.ITaskItem)">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyReference"/> class.
            </summary>
            <param name="taskItem">The MSBuild task item to get the properties from.</param>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.Original">
            <summary>
              Gets or sets the original name used to request the assembly resolve.
            </summary>
            <value>
              The original name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.Name">
            <summary>
              Gets or sets the assembly name.
            </summary>
            <value>
              The assembly name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.FullName">
            <summary>
              Gets or sets the full assembly name.
            </summary>
            <value>
              The full assembly name.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.FullPath">
            <summary>
              Gets or sets the full path to the assembly.
            </summary>
            <value>
              The path to the assembly.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.CopyLocal">
            <summary>
              Gets or sets a value indicating the assembly should be copied local.
            </summary>
            <value>
              <c>true</c> if copy local; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.GlobalAssemblyCache">
            <summary>
              Gets a value indicating whether the assembly was loaded from the global assembly cache.
            </summary>
            <value>
              <c>true</c> if the assembly was loaded from the global assembly cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.ResolvedFrom">
            <summary>
              Gets or sets the location where the assembly was resolved from.
            </summary>
            <value>
              The location where the assembly was resolved from.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyReference.ShadowPath">
            <summary>
              Gets or sets the full path to the assemblies new local path.
            </summary>
            <value>
              The path to the assembly local path.
            </value>
        </member>
        <member name="M:CodeSmith.Engine.Compiler.AssemblyResolver.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:CodeSmith.Engine.Compiler.AssemblyResolver"/> class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Compiler.AssemblyResolver.Current">
            <summary>
              Gets the current instance of <see cref="T:CodeSmith.Engine.Compiler.AssemblyResolver"/>.
            </summary>
            <value>The current instance.</value>
        </member>
        <member name="T:CodeSmith.Engine.CodeTemplateCompiler">
            <summary>
            This class can be used to compile templates.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.CodeTemplateCompiler"/> instance.
            </summary>
            <param name="path">Path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.#ctor(CodeSmith.Engine.ICodeTemplateInfo)">
            <summary>
            Creates a new <see cref="T:CodeSmith.Engine.CodeTemplateCompiler"/> instance.
            </summary>
            <param name="codeTemplateInfo">Code template info.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="forceRecompile">Force recompile.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String,System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
            <param name="forceRecompile">Force recompile.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.Compile(System.String,System.Boolean,System.Boolean)">
            <summary>
            Compiles the specified template and outputs an assembly to the output path.
            </summary>
            <param name="outputPath">Output path.</param>
            <param name="forceRecompile">Force recompile.</param>
            <param name="inMemory"></param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateCompiler.CreateInstance">
            <summary>
            Creates an instance of the compiled template.  You must compile the template first.
            </summary>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CodeTemplateInfo">
            <summary>
            Gets the code template information.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Debug">
            <summary>
            Gets or sets a value indicating whether the template should be compiled in debug mode or not.
            </summary>
            <value>
            	<c>true</c> if debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.LinePragmas">
            <summary>
            Gets or sets a value indicating whether line pragmas should be output in the compiled source code.
            </summary>
            <value>
            	<c>true</c> if line pragmas should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.KeepTempFiles">
            <summary>
            Gets or sets a value indicating whether the temp files should be kept.
            </summary>
            <value>
            	<c>true</c> if you want to keep the temp files; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Namespace">
            <summary>
            Namespace that the compiled template should be a member of.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.TypeName">
            <summary>
            Gets or sets the type name of the compiled template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CompiledAssembly">
            <summary>
            Provides access to the compiled assembly.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.GeneratedAssemblySourceCode">
            <summary>
            Provides access to the generated source code.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.Errors">
            <summary>
            Gets the errors.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateCompiler.CompilerOutputWriter">
            <summary>
            Gets or sets the compiler output writer.
            </summary>
            <value></value>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateInfo.GetHashCode">
            <summary>
            Gets the hash code based on the template dependencies.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.FullPath">
            <summary>
            Gets the full path to the template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.FileName">
            <summary>
            Gets the name of the template file.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DirectoryName">
            <summary>
            Gets the name of the directory the template is located in.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.Language">
            <summary>
            Gets the template language.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.TargetLanguage">
            <summary>
            Gets the target language.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.TemplateEncoding">
            <summary>
            Gets the response encoding.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.Description">
            <summary>
            Gets the description.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DateCreated">
            <summary>
            Gets the date the template was created.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.DateModified">
            <summary>
            Gets the date the template was modified.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.ContentHashCode">
            <summary>
            Gets the hash code based on the template content and all template Dependencies.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateInfo.OutputType">
            <summary>
            Gets the type of the output for this template.
            </summary>
            <value>The type of the output.</value>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.DisposeManagedResources">
            <summary>
            Disposes the managed resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.DisposeUnmanagedResources">
            <summary>
            Disposes the unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ComponentModel.ObservableBase.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="!:DisposableBase"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TemplateContext.SetContext(CodeSmith.Engine.CodeTemplate)">
            <summary>
            Adds a <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> instance to the current thread's <see cref="T:CodeSmith.Engine.TemplateContext"/>.
            </summary>
            <param name="template">The currently executing CodeTemplate</param>
            <returns>An instance of the current TemplateContext.</returns>
        </member>
        <member name="M:CodeSmith.Engine.TemplateContext.Dispose">
            <summary>
            Cleans up all resources associated with the <see cref="T:CodeSmith.Engine.TemplateContext"/>.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.Current">
            <summary>
            Returns the <see cref="T:CodeSmith.Engine.TemplateContext"/> data associated with the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.CodeTemplate">
            <summary>
            Returns the <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.ParentCodeTemplate">
            <summary>
            Returns the Parent <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.TemplateContext.RootCodeTemplate">
            <summary>
            Returns the Root <see cref="P:CodeSmith.Engine.TemplateContext.CodeTemplate"/> that is being rendered in the current executing <see cref="T:System.Threading.Thread"/>. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TemplateError.#ctor(CodeSmith.Engine.TemplateError,System.String)">
            <summary>
            Creates a new Template Error while setting the SourceFilePath property.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.MSBuildProjectUtility.IncludeOutputsMetadataName">
            <summary></summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.MSBuildProjectUtility.GetDefaultItemType(System.String)">
            <summary>
            Gets the item type for the file type.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="P:CodeSmith.Engine.Utility.MSBuildProjectUtility.CodeSmithSafeImport">
            <summary>
            Gets the CodeSmith safe import.
            </summary>
            <value>The CodeSmith safe import.</value>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.IHostChannel">
            <summary>
            This is the channel from the client (child) process to the host (parent) process.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.IHostChannel.ClientReady(CodeSmith.Engine.Remoting.IClientChannel)">
            <summary>
            This is called by the client when it is ready to receive messages.
            </summary>
            <param name="clientChannel">A pointer to the client channel</param>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.IHostChannel.HostProcess">
            <summary>
            The process id of the host (parent) process.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.IClientChannel">
            <summary>
            This is the channel from the host (parent) proccess to the client (child) process.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Remoting.HostedProcessBase`1">
            <summary>
            A class to aid in remoting with a host process. 
            </summary>
            <remarks>
            There can only be one HostProcess for the current process.  
            Initialize must be called to wire up the host process remoting.
            When the client is fully started and ready to receive message, 
            ClientReady must be called to alert the host process that messages
            can be sent.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Remoting.HostedProcessBase`1"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageReceived(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageReceived"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageSent(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageSent"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.RaiseMessageError(System.Exception)">
            <summary>
            Raises the message error.
            </summary>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.Initialize(System.String)">
            <summary>
            Initializes <see cref="T:CodeSmith.Engine.Remoting.HostedProcessBase`1"/> by getting the <see cref="P:CodeSmith.Engine.Remoting.HostedProcessBase`1.HostChannel"/> from
            the specified host ipc URI. Must be called before calling other methods.
            </summary>
            <param name="hostIpcUri">The host ipc URI.</param>
            <remarks>
            Initialize must be called before any other method in the class.
            Initialize can only be called once, additional calls will be ignored
            </remarks>
            <exception cref="T:System.ArgumentException">
            Thrown when host remoting channel can not be loaded from <paramref name="hostIpcUri"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.ClientReady(CodeSmith.Engine.Remoting.IClientChannel)">
            <summary>
            Alerts the host process that the client is ready to receive messages.  Must be called after Initialize.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.CreateClient(System.Func{CodeSmith.Engine.Remoting.IClientChannel})">
            <summary>
            Alerts the host process that the client is ready to receive messages.  Must be called after Initialize.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Sends message to host async. Initialize must be called before this.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SignalShutdown">
            <summary>
            Shutdown was initiated in the client.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageReceived">
            <summary>
            Occurs when a message is received from the remote process.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageSent">
            <summary>
            Occurs when a message is sent to the host process.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.HostedProcessBase`1.MessageError">
            <summary>
            Raised when an error is thrown by <see cref="M:CodeSmith.Engine.Remoting.HostedProcessBase`1.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)"/>.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IPropertySerializer">
            <summary>
            Interface that all property serializers must implement.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.SaveProperty(CodeSmith.Engine.PropertySerializerContext,System.Object)">
            <summary>
            This method will be used to save the property value when a template is being compiled.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The property to be saved.</param>
            <returns>An object that will be stored in a Hashtable during template compilation.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.LoadProperty(CodeSmith.Engine.PropertySerializerContext,System.Object)">
            <summary>
            This method will be used to restore the property value after a template has been compiled.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The property to be loaded.</param>
            <returns>The value to be assigned to the template property after it has been compiled.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.WritePropertyXml(CodeSmith.Engine.PropertySerializerContext,System.Xml.XmlWriter,System.Object)">
            <summary>
            This method will be used when serializing the property value to an XML property set.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="writer">The XML writer that the property value will be written to.</param>
            <param name="propertyValue">The property to be serialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.ReadPropertyXml(CodeSmith.Engine.PropertySerializerContext,System.Xml.XmlNode)">
            <summary>
            This method will be used when deserializing the property from an XML property set.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="propertyValue">The XML node to read the property value from.</param>
            <returns>The value to be assigned to the template property.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IPropertySerializer.ParseDefaultValue(CodeSmith.Engine.PropertySerializerContext,System.String)">
            <summary>
            This method will be used to parse a default value for a property when a template is being instantiated.
            </summary>
            <param name="context">Context information of the target property.</param>
            <param name="defaultValue">The default value.</param>
            <returns>An object that will be assigned to the template property.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCode(System.String)">
            <summary>
            Generates a CodeSmith Generator Project file (.csp) based on the file path to the .csp.
            </summary>
            <param name="xmlFilePath">File path to the CodeSmith Generator Project file (.csp) file.</param>
            <returns>true if the CodeSmith Generator Project file (.csp) was generated.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCode(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Generates a CodeSmith Generator Project.
            </summary>
            <param name="project">The CodeSmith Generator Project file.</param>
            <returns>true if the CodeSmith Generator Project file (.csp) was generated.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCode(System.String,System.String)">
            <summary>
            Generates a CodeSmith Generator Project file (.csp) based on the file path to the .csp and the .csp's file content.
            </summary>
            <param name="xmlFilePath">File path to the CodeSmith Generator Project file (.csp) file.</param>
            <param name="xmlFragment">The content of the CodeSmith Generator Project file (.csp) file.</param>
            <returns>true if the CodeSmith Generator Project file (.csp) was generated.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCodeAsync(System.String)">
            <summary>
            Begin generating code asynchronous
            </summary>
            <param name="xmlFilePath">The project file to generate</param>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCodeAsync(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Generates a CodeSmith Generator Project.
            </summary>
            <param name="project">The CodeSmith Generator Project file.</param>
            <returns>true if the CodeSmith Generator Project file (.csp) was generated.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ProjectCodeGenerator.GenerateCodeAsync(System.String,System.String)">
            <summary>
            Generates a CodeSmith Generator Project file (.csp) based on the file path to the .csp and the .csp's file content.
            </summary>
            <param name="xmlFilePath">File path to the CodeSmith Generator Project file (.csp) file.</param>
            <param name="xmlFragment">The content of the CodeSmith Generator Project file (.csp) file.</param>
            <returns>true if the CodeSmith Generator Project file (.csp) was generated.</returns>
        </member>
        <member name="P:CodeSmith.Engine.ProjectCodeGenerator.IsGenerating">
            <summary>
            Returns true while generating.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.TryGetValue(System.String,System.String,System.Object@)">
            <summary>
            Access's the Registry and gets the string value of the specific SubKey.
            </summary>
            <param name="subKey">The SubKey.</param>
            <param name="name">The name of the key.</param>
            <param name="value">The value returned from the registry.</param>
            <returns>Returns true if the object is not null.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.UpgradeFile``1(System.String)">
            <summary>
            Attempts to update configuration from a configuration file. The version of CodeSmith must be older than CodeSmith 5.1.
            </summary>
            <typeparam name="T">Type of the configuration class.</typeparam>
            <param name="fileName">The configuration filename.</param>
            <returns>Updated Configuration file if a configuration file was found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.FindVersions(System.String)">
            <summary>
            Finds all configuration files with a specified name.
            </summary>
            <param name="fileName">Configuration file name.</param>
            <returns>A List of configuration files with the specified file name.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.EnsureInitialize">
            <summary>
            This method is here purely to make sure that we don't make a double call to the Initialize method while initializing configuration.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Find(System.String,System.String)">
            <summary>
            Finds the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <param name="targetExtension">The target extension.</param>
            <returns>The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias, extension pair.</returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Find(System.String,System.String,System.Boolean)">
            <summary>
            Finds the specified alias.
            </summary>
            <param name="alias">The alias.</param>
            <param name="targetExtension">The target extension.</param>
            <param name="exactMatchOnly">If true, the target extension must match.</param>
            <returns>The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that matches the passed in alias and targetExtension</returns>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.FindSimilar(System.String,System.String)">
            <summary>
            Finds the <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias.
            </summary>
            <param name="partialAlias">The partial alias.</param>
            <param name="targetExtension">The target extension.</param>
            <returns>
            The <see cref="T:CodeSmith.Engine.ActiveSnippetMapping"/> instance that match closest to the alias.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetConfiguration.SnippetMappings">
            <summary>
            A collection of Active Snippet maps.
            </summary>
            <remarks>
            The key for the collection is the alias of the template map.
            </remarks>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetConfiguration.Instance">
            <summary>
            Gets the current singleton instance of Configuration.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of Configuration wont be created until the very first 
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton. 
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.ActiveSnippetConfiguration.Nested">
            <summary>
            Nested class to lazy-load singleton.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ActiveSnippetConfiguration.Nested.#cctor">
            <summary>
            Initializes the Nested class.
            </summary>
            <remarks>
            Explicit static constructor to tell C# compiler not to mark type as beforefieldinit.
            </remarks>
        </member>
        <member name="F:CodeSmith.Engine.ActiveSnippetConfiguration.Nested.Current">
            <summary>
            Current singleton instance.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IIndexed">
            <summary>
            Interface defining an indexed object.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IIndexed.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>The alias.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TargetLanguage">
            <summary>
            Gets or sets the target language.
            </summary>
            <value>The target language.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TemplateFile">
            <summary>
            Gets or sets the template file.
            </summary>
            <value>The template file.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.PreviousTemplateFile">
            <summary>
            Returns the original template file name.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TemplateName">
            <summary>
            Gets or sets the name of the template.
            </summary>
            <value>The name of the template.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.DisplayName">
            <summary>
            Gets the name of the display.
            </summary>
            <value>The name of the display.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.TargetExtensions">
            <summary>
            Gets or sets the target file extensions.
            </summary>
            <value>The target extensions.</value>
        </member>
        <member name="P:CodeSmith.Engine.ActiveSnippetMapping.PropertySet">
            <summary>
            Gets or sets the property set.
            </summary>
            <value>The property set.</value>
        </member>
        <member name="T:CodeSmith.Engine.VirtualCollectionBase`1">
            <summary>
            A base Collection used to load data on depand from database.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="array"/> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="array"/> is multidimensional.
            -or-
            <paramref name="index"/> is equal to or greater than the length of <paramref name="array"/>.
            -or-
            The number of elements in the source <see cref="T:System.Collections.ICollection"/> is greater than the available space from <paramref name="index"/> to the end of the destination <paramref name="array"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The type of the source <see cref="T:System.Collections.ICollection"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to add to the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"/> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            true if the <see cref="T:System.Object"/> is found in the <see cref="T:System.Collections.IList"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to locate in the <see cref="T:System.Collections.IList"/>.</param>
            <returns>
            The index of <paramref name="value"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"/> to insert into the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.IList"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
            <exception cref="T:System.NullReferenceException">
            	<paramref name="value"/> is null reference in the <see cref="T:System.Collections.IList"/>.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> to remove from the <see cref="T:System.Collections.IList"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.IList"/> is read-only.
            -or-
            The <see cref="T:System.Collections.IList"/> has a fixed size.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"/>.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.IList`1"/> is read-only.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetCount">
            <summary>
            Gets the count.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetIndex(`0)">
            <summary>
            Gets the index.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetItem(System.Int32)">
            <summary>
            Gets the item.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.GetItems">
            <summary>
            Gets the items.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.AddItem(`0)">
            <summary>
            Adds the item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an element into the Collection at the specified index. 
            </summary>
            <param name="index">The zero-based index at which item should be inserted. </param>
            <param name="item">The object to insert. The value can be null (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the Collection. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.IsCompatibleObject(System.Object)">
            <summary>
            Determines whether the specified value is compatible with Collection.
            </summary>
            <param name="value">The value to check.</param>
            <returns>
            	<c>true</c> if is a compatible object; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VirtualCollectionBase`1.VerifyValueType(System.Object)">
            <summary>
            Verifies the type of the value.
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"/> is synchronized (thread safe); otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </summary>
            <value></value>
            <returns>
            An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"/>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"/> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"/> has a fixed size; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <value></value>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.Item(System.Int32)">
            <summary>
            Gets or sets the type T at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.VirtualCollectionBase`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.CachedConfiguration.CachedData.Value">
            <summary>
            Value to be cached.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Configuration"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.LoadDefaults">
            <summary>
            This method will safely upgrade the default values for collections and overwrite any directory settings.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.UpgradeRegistry">
            <summary>
            The following method will check the registry and see if an upgrade is needed.
            </summary>
            <returns>Returns true if the registry is up to date; returns false if there is no previous registry version.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.UpdateLinesGenerated(System.String)">
            <summary>
            Updates Lines Generated based off of the passed in string containing source code.
            </summary>
            <param name="generatedCode">Source code.</param>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetHoursSaved">
            <summary>
            Returns the numbers of hours saved by using CodeSmith.
            </summary>
            <returns>Returns the numbers of hours saved by using CodeSmith.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetMoneySaved">
            <summary>
            Returns the amount of money saved by using CodeSmith.
            </summary>
            <returns>Returns the amount of money saved by using CodeSmith.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.GetIconResourcePath">
            <summary>
            Returns the path to the icon resource dll.
            </summary>
            <returns>Returns the path to the icon resource dll.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.ExtractEmbeddedLicense(System.String,System.Reflection.Assembly)">
            <summary>
            Extracts an embedded license if it was found.
            </summary>
            <param name="filePath">The full path to store the license file.</param>
            <param name="assembly">The assembly that contains the license file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.SetLicenseAssembly(System.Reflection.Assembly)">
            <summary>
            Checks an assembly for an embedded license.
            </summary>
            <param name="assembly">The assembly with the embedded license.</param>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.TrackLinesGenerated">
            <summary>
            Gets or sets a value indicating whether to track lines generated.
            </summary>
            <value><c>true</c> to track lines generated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.LinesGenerated">
            <summary>
            Gets or sets the number of lines generated.
            </summary>
            <value>The number of lines generated.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.AverageLinesPerHour">
            <summary>
            Gets or sets the average lines per hour.
            </summary>
            <value>The average lines per hour.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.AverageCostPerHour">
            <summary>
            Gets or sets the average cost per hour.
            </summary>
            <value>The average cost per hour.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ApplicationDirectory">
            <summary>
            Gets or sets the application directory.
            </summary>
            <value>The application directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.MergeStrategyAliases">
            <summary>
            Gets the merge strategy aliases.
            </summary>
            <value>The merge strategy aliases.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.LanguageRegionDefinitions">
            <summary>
            Gets the language region definitions.
            </summary>
            <value>The language region definitions.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.PropertyDesignerMaps">
            <summary>
            Gets the property designer maps.
            </summary>
            <value>The property designer maps.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ConditionalCompilation">
            <summary>
            Gets the conditional compilation statements for the compiler.
            </summary>
            <value>The conditional compilation.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithBaseSampleDirectory">
            <summary>
            Gets or sets the base CodeSmith sample directory.
            </summary>
            <value>The CodeSmith sample directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithSampleDirectory">
            <summary>
            Gets or sets the CodeSmith sample directory.
            </summary>
            <value>The CodeSmith sample directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithMapsDirectory">
            <summary>
            Gets or sets the CodeSmith maps directory.
            </summary>
            <value>The CodeSmith maps directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithTemplatesDirectory">
            <summary>
            Gets or sets the CodeSmith templates directory.
            </summary>
            <value>The CodeSmith templates directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CodeSmithDataDirectory">
            <summary>
            Gets or sets the CodeSmith data directory.
            </summary>
            <value>The CodeSmith data directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.TemplateCacheDirectory">
            <summary>
            Gets or sets the template cache directory.
            </summary>
            <value>The template cache directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.PropertySetCacheDirectory">
            <summary>
            Gets or sets the property set cache directory.
            </summary>
            <value>The property set cache directory.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.CustomerExperienceImprovementProgramEnabled">
            <summary>
            Controls whether the Customer Experience Improvement Program is enabled.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.ProbingPath">
            <summary>
            Gets or sets the semicolon delimited list of assembly probing paths. The path is relative to ApplicationDirectory.
            </summary>
            <value>The semicolon delimited list of assembly probing paths.</value>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.IsEmbeddedEntryAssembly">
            <summary>
            Returns true if CodeSmith Explorer, CodeSmith Studio, or Console was not the entry assembly.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.EntryAssemblyName">
            <summary>
            Returns the name of the current Entry Assembly.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Configuration.Instance">
            <summary>
            Gets the current singleton instance of Configuration.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of Configuration wont be created until the very first
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton.
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.Configuration.Nested">
            <summary>
            Nested class to lazy-load singleton.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Configuration.Nested.#cctor">
            <summary>
            Initializes the Nested class.
            </summary>
            <remarks>
            Explicit static constructor to tell C# compiler not to mark type as beforefieldinit.
            </remarks>
        </member>
        <member name="F:CodeSmith.Engine.Configuration.Nested.Current">
            <summary>
            Current singleton instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase`1.LoadSettings">
            <summary>
            Loads this instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationBase`1.SaveSettings">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ConfigurationBase`1.Instance">
            <summary>
            Gets the singleton instance.
            </summary>
            <value>The singleton instance.</value>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationItemBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ConfigurationItemBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ConfigurationItemBase.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ConfigurationItemBase"/> class.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="P:CodeSmith.Engine.ConfigurationItemBase.Index">
            <summary>
            Gets or sets the index.
            </summary>
            <value>The index.</value>
        </member>
        <member name="E:CodeSmith.Engine.ConfigurationItemBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable">
            <summary>
            IndexedEnumerable makes enumerating over collections much easier by implementing properties like: IsEven, IsOdd, IsLast.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an IndexedEnumerable from any collection implementing IEnumerable&lt;T&gt;
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new IndexedEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable.AsIndexedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns an IndexedEnumerable from any collection implementing IEnumerable&lt;T&gt;
            </summary>
            <typeparam name="T">Type of enumerable</typeparam>
            <param name="source">Source enumerable</param>
            <returns>A new IndexedEnumerable&lt;T&gt;.</returns>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable`1">
            <summary>
            IndexedEnumerable makes enumerating over collections much easier by implementing properties like: IsEven, IsOdd, IsLast.
            </summary>
            <typeparam name="T">Type to iterate over</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor that takes an IEnumerable&lt;T&gt;
            </summary>
            <param name="enumerable">The collection to enumerate.</param>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumeration of Entry objects.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IndexedEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Non-generic form of GetEnumerator.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IndexedEnumerable`1.EntryItem">
            <summary>
            Represents each entry returned within a collection,
            containing the _value and whether it is the first and/or
            the last entry in the collection's. enumeration
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.Value">
            <summary>
            The Entry Value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsFirst">
            <summary>
            Returns true if it is the first item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsLast">
            <summary>
            Returns true if it is the last item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.Index">
            <summary>
            The index of the current item in the collection.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsEven">
            <summary>
            Returns true if the current item has an even index
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.IndexedEnumerable`1.EntryItem.IsOdd">
            <summary>
            Returns true if the current item has an odd index
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.RemoteProcessBase.RaiseMessageReceived(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Raises the <see cref="E:CodeSmith.Engine.Remoting.RemoteProcessBase.MessageReceived"/> event.
            </summary>
            <param name="remoteMessage">The remote message.</param>
        </member>
        <member name="M:CodeSmith.Engine.Remoting.RemoteProcessBase.SendMessageAsync(CodeSmith.Engine.Remoting.RemoteMessage)">
            <summary>
            Sends a message to the remote process
            </summary>
            <param name="message"></param>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.ProcessAvailable">
            <summary>
            Occurs when the remote process is available.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.ProcessStarting">
            <summary>
            Occurs when the remote process is starting.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Remoting.RemoteProcessBase.MessageReceived">
            <summary>
            Occurs when a message is received from the remote process.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.RemoteProcessBase.ExecutablePath">
            <summary>
            Gets or sets the executable path for the remote process.
            </summary>
            <value>
            The executable path for the remote process.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.Remoting.RemoteProjectProcess.Current">
            <summary>
            Gets the current singleton instance of RemoteProjectProcess.
            </summary>
            <value>The current singleton instance.</value>
            <remarks>
            An instance of RemoteProjectProcess wont be created until the very first 
            call to the sealed class. This is a CLR optimization that
            provides a properly lazy-loading singleton. 
            </remarks>
        </member>
        <member name="T:CodeSmith.Engine.Utility.CommandLineBuilder">
            <summary>
            Comprises utility methods for constructing a command line.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.CommandLineBuilder"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.CommandLineBuilder"/> class.
            </summary>
            <param name="commandLine">The command line to start with.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNameIfNotNull(System.String)">
            <summary>
            Appends the command line with file name represented by the parameter, inserting quotation marks if necessary.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNamesIfNotNull(System.String[],System.String)">
            <summary>
            Appends the command line with a list of file names, inserting quotation marks if necessary. 
            </summary>
            <param name="fileNames">The file names to append. If the array is null reference, then this method has no effect.</param>
            <param name="delimiter">The delimiter to put between file names in the command line.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendFileNameWithQuoting(System.String)">
            <summary>
            Appends the command line with a file name, and surrounds the file name with quotation marks as necessary.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSpaceIfNotEmpty">
            <summary>
            Appends the space if command line is not empty.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitch(System.String)">
            <summary>
            Appends the command line with the specified switch. 
            </summary>
            <param name="switchName">Name of the switch.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfTrue(System.String,System.Boolean)">
            <summary>
            Appends the switch if true.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotNull(System.String,System.String)">
            <summary>
            Appends the switch if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotDefault``1(System.String,``0)">
            <summary>
            Appends the switch if not default.
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotDefault``1(System.String,``0,``0)">
            <summary>
            Appends the switch if not default.
            </summary>
            <typeparam name="T">Type of the parameter</typeparam>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchIfNotNull(System.String,System.String[],System.String)">
            <summary>
            Appends the switch if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameters">The parameters.</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchUnquotedIfNotNull(System.String,System.String)">
            <summary>
            Appends the switch unquoted if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendSwitchUnquotedIfNotNull(System.String,System.String[],System.String)">
            <summary>
            Appends the switch unquoted if not null.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameters">The parameters.</param>
            <param name="delimiter">The delimiter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendTextUnquoted(System.String)">
            <summary>
            Appends the text unquoted.
            </summary>
            <param name="textToAppend">The text to append.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.AppendTextWithQuoting(System.String)">
            <summary>
            Appends the text with quoting.
            </summary>
            <param name="textToAppend">The text to append.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.IsQuotingRequired(System.String)">
            <summary>
            Determines whether [is quoting required] [the specified parameter].
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
            	<c>true</c> if [is quoting required] [the specified parameter]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.VerifyThrowNoEmbeddedDoubleQuotes(System.String,System.String)">
            <summary>
            Verifies the throw no embedded double quotes.
            </summary>
            <param name="switchName">Name of the switch.</param>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.CommandLineBuilder.VerifyThrowArgumentNull(System.Object,System.String)">
            <summary>
            Verifies the throw argument null.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterName">Name of the parameter.</param>
        </member>
        <member name="P:CodeSmith.Engine.Utility.CommandLineBuilder.CommandLine">
            <summary>
            Gets the command line buffer.
            </summary>
            <value>The command line.</value>
        </member>
        <member name="T:CodeSmith.Engine.DelimitedStringCollection">
            <summary>
            A collection that provides notifications when items get added, removed, or when the whole list is refreshed. 
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
            <param name="collection">The collection.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/> class.
            </summary>
            <param name="delimitedValues">The delimited values.</param>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the values.
            </summary>
            <param name="values">The values.</param>
            <param name="delimiter">The delimiter.</param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the values.
            </summary>
            <param name="values">The values.</param>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.ToArray">
            <summary>
            Returns an array of strings that represents the current collection.
            </summary>
            <returns>An array of strings that represents the current collection.</returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.AddDelimited(System.String)">
            <summary>
            Adds the split values from <paramref name="delimitedValues"/> to the collection.
            The string is split using the <see cref="P:CodeSmith.Engine.DelimitedStringCollection.Delimiter"/> property.
            </summary>
            <param name="delimitedValues">The delimited values.</param>
            <returns>The number of values added.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="delimitedValues"/> is null.</exception>
        </member>
        <member name="P:CodeSmith.Engine.DelimitedStringCollection.Delimiter">
            <summary>
            Gets or sets the string delimiter.
            </summary>
            <value>The string delimiter.</value>
        </member>
        <member name="T:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter">
            <summary>
            A type converter for the <see cref="T:CodeSmith.Engine.DelimitedStringCollection"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="destinationType">A <see cref="T:System.Type"/> that represents the type you want to convert to.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.DelimitedStringCollection.DelimitedStringTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="destinationType"/> parameter is null.
            </exception>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed.
            </exception>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.LoadDefaultSettings">
            <summary>
            Loads the default settings.
            </summary>
            <remarks>
            This method is called when existing config file is not 
            found.  Use this method to populate the configuration 
            class with default values.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.UpgradeFile(System.IO.FileInfo@)">
            <summary>
            Upgrades the file.
            </summary>
            <param name="file">The file to upgrade.</param>
            <remarks>
            This method is called just before loading a previous config 
            file. Use this method to modify the file before it is loaded.
            </remarks>
        </member>
        <member name="M:CodeSmith.Engine.IConfiguration.UpgradeSettings">
            <summary>
            Upgrades the settings.
            </summary>
            <remarks>
            This method is called after loading a previous config file. 
            Use this method to change any existing configurations to
            work with the latest version.
            </remarks>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.CanWatchFile">
            <summary>
            Gets a value indicating whether this instance can watch file.
            </summary>
            <value>
            	<c>true</c> if this instance can watch file; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.ConfigurationFile">
            <summary>
            Gets the configuration file.
            </summary>
            <value>The configuration file.</value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.IsBackwardCompatible">
            <summary>
            Gets a value indicating whether this configuration is backward compatible.
            </summary>
            <value>
            	<c>true</c> if this configuration is backward compatible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CodeSmith.Engine.IConfiguration.ConfigurationVersion">
            <summary>
            Gets or sets the configuration version.
            </summary>
            <value>The configuration version.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.LanguageKeys">
            <summary>
            Gets the list of language keys for the region defintion.
            </summary>
            <value>The language keys.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.RegionStartRegex">
            <summary>
            Gets or sets the region start regex.
            </summary>
            <value>The region start regex.</value>
        </member>
        <member name="P:CodeSmith.Engine.LanguageRegionDefinition.RegionEndRegex">
            <summary>
            Gets or sets the region end regex.
            </summary>
            <value>The region end regex.</value>
        </member>
        <member name="P:CodeSmith.Engine.MergeStrategyAlias.Name">
            <summary>
            Gets or sets the name of the merge strategy alias.
            </summary>
            <value>The merge strategy alias name.</value>
        </member>
        <member name="P:CodeSmith.Engine.MergeStrategyAlias.TypeName">
            <summary>
            Gets or sets the fully qualified type name for the merge strategy.
            </summary>
            <value>The name of the type.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.DataTypes">
            <summary>
            Gets the list of data types the designer should be used for.
            </summary>
            <value>The data types.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.EditorType">
            <summary>
            Gets or sets the type of the editor.
            </summary>
            <value>The type of the editor.</value>
        </member>
        <member name="P:CodeSmith.Engine.PropertyDesignerMap.SerializerType">
            <summary>
            Gets or sets the type of the serializer.
            </summary>
            <value>The type of the serializer.</value>
        </member>
        <member name="T:CodeSmith.Engine.CodeTemplate">
            <summary>
            All templates must derive from this class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnInit">
            <summary>
            This method can be overridden to perform logic when the template instance is created.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetPropertyDefaults">
            <summary>
            This method is overridden in templates to set default values in a template instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetUnknownDirectiveAttributes">
            <summary>
            This method is overridden in templates to set unknown directive attributes in the ContextData.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreRender">
            <summary>
            This method can be overridden to perform logic before the template is rendered.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnError(System.Exception)">
            <summary>
            This method can be overridden to perform logic when a template exception occurs.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertyChanged(System.String)">
            <summary>
            This method can be overridden to perform logic when a property changes.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertiesLoaded">
            <summary>
            This method can be overridden to perform logic when properties are loaded.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPropertiesSaved">
            <summary>
            This method can be overridden to perform logic when properties are saved.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Render(System.IO.TextWriter)">
            <summary>
            Renders to the template output to the specified writer.
            </summary>
            <param name="writer">Writer.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPostRender(System.String)">
            <summary>
            This method can be overridden to perform logic after the template is rendered.
            </summary>
            <param name="result">The template output.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToString">
            <summary>
            Renders the template output to a String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToString(System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="path">The output file path.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.String,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="path">The output file path.</param>
            <param name="dependentUpon">The file that the output is dependent upon.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(CodeSmith.Engine.OutputFile,System.Boolean)">
            <summary>
            Renders the template output to a file.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="overwrite">if set to <c>true</c> overwrite file.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="path">The output path.</param>
            <param name="strategy">The merge strategy to use.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(System.String,System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="path">The output path.</param>
            <param name="strategy">The merge strategy to use.</param>
            <param name="sourcePath">The source file to base the merge on.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RenderToFile(CodeSmith.Engine.OutputFile,System.String,CodeSmith.Engine.IMergeStrategy)">
            <summary>
            Renders the template output to a file using a merge strategy.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="strategy">The merge strategy to use.</param>
            <param name="sourcePath">The source file to base the merge on.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Validate">
            <summary>
            Validates this template instance.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCustomValidationErrors">
            <summary>
            Allows the developer to add custom ValidationErrors to the validation collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetFileName">
            <summary>
            Gets a default name for the template output.  This can be overridden in your template to provide a suitable name for the output of the template based on the property values.
            </summary>
            <returns>A file name (E.G., output.txt).</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetContextData(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Set the context data object for the template.
            Any items in the current ContextData object will be added to the new one.
            This method should only be called while a template is initializing.
            </summary>
            <param name="contextData">The context data object.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.ParseDefaultValue(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Parses the default value for properties.  This can be overridden to provide custom default parsing logic.
            </summary>
            <param name="targetProperty">Target property.</param>
            <param name="defaultValue">Default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetPropertyAttribute(System.String,System.String)">
            <summary>
            Gets the property attribute.  Property attributes can be used to store various information at the property level.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The value of the attribute</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetPropertyAttribute(System.String,System.String,System.String)">
            <summary>
            Sets the property attribute.  Property attributes can be used to store various information at the property level.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetTemplateAttribute(System.String)">
            <summary>
            Gets the template attribute.  Template attributes can be used to store various information at the template level.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <returns>The value of the attribute</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetTemplateAttribute(System.String,System.String)">
            <summary>
            Sets the template attribute.  Template attributes can be used to store various information at the template level.
            </summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperties">
            <summary>
            Gets information on all of the properties on this template.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperties(System.Boolean)">
            <summary>
            Gets information on all of the properties on this template.
            </summary>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetRequiredProperties">
            <summary>
            Gets information on all of the required properties for this template.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable(System.Boolean)">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToHashtable(System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Saves the properties to a Hashtable.
            </summary>
            <returns></returns>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromHashtable(System.Collections.Hashtable)">
            <summary>
            Restores the properties from a Hashtable.
            </summary>
            <param name="properties">Properties.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXmlFile(System.String)">
            <summary>
            Saves the properties to an XML file.
            </summary>
            <param name="xmlFilePath">XML file path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate)">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Boolean)">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.CopyPropertiesTo(CodeSmith.Engine.CodeTemplate,System.Boolean,System.Collections.Generic.ICollection{System.String})">
            <summary>
            Copies any matching properties to another CodeTemplate instance.
            </summary>
            <param name="template">Template.</param>
            <param name="includeNonBrowsable">Whether non-browsable properties should be included.</param>
            <param name="ignorePropertyNames">Ignores the specified list of property names when copying properties to the template.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromXmlFile(System.String)">
            <summary>
            Restores the properties from XML file.
            </summary>
            <param name="xmlFilePath">XML file path.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXml(System.Xml.XmlWriter)">
            <summary>
            Saves the properties to XML.
            </summary>
            <param name="xmlwriter">XmlWriter.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SavePropertiesToXml">
            <summary>
            Saves the properties to XML.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RestorePropertiesFromXml(System.String,System.String)">
            <summary>
            Restores the properties from XML.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="baseDirectory">The base directory to resolve file references.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetProperty(System.String,System.Object)">
            <summary>
            Sets the value for the specified property.
            </summary>
            <param name="name">Property name.</param>
            <param name="value">Value to assign.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.SetProperty(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Sets the value for the specified property.
            </summary>
            <param name="propertyInfo">Information about the target property.</param>
            <param name="value">Value to assign.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetProperty(System.String)">
            <summary>
            Gets the value for the specified property.
            </summary>
            <param name="name">Property name.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String,System.Boolean)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <param name="forceRecompile">Forces the template to be recompiled instead of using the cache.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.GetCodeTemplateInstance(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets an instance of the specified template.
            </summary>
            <param name="templatePath">Path to the template.</param>
            <param name="forceRecompile">Forces the template to be recompiled instead of using the cache.</param>
            <param name="shareContextData">Share template context data with the child template instance.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnOutputRegistered(CodeSmith.Engine.OutputRegisteredEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreOutputWritten(CodeSmith.Engine.OutputCancelEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnPreOutputWritten(System.String)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.OnReferenceRegistered(CodeSmith.Engine.ItemRegisteredEventArgs)">
            <summary>
            Raises the <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> event.
            </summary>
            <param name="e">The <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.RegisterReference(System.String)">
            <summary>
            Registers the reference. When generating from within Visual Studio, these references will be added to the project.
            </summary>
            <param name="referenceName">Name of the reference.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Create``1">
            <summary>
            Gets an instance of the specified template type.  Should be used with the Register directive.
            </summary>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplate.Create``1(System.Boolean)">
            <summary>
            Gets an instance of the specified template type.  Should be used with the Register directive.
            </summary>
            <param name="shareContextData">Share template context data with the child template instance.</param>
            <returns>The CodeTemplate instance.</returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.Response">
            <summary>
            Response stream for the template output.  You can write to the stream programmatically using this property.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.Progress">
            <summary>
            Provides a way to report execution progress for the template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.State">
            <summary>
            State of this template instance.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.CodeTemplateInfo">
            <summary>
            Gets the information for the current template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.ValidationErrors">
            <summary>
            Gets the validation errors for this template.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplate.ContextData">
            <summary>
            Contextual data items can be stored in this object and shared with sub-templates.  This data will not be persisted with the template property set.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.OutputRegistered">
            <summary>
                Raised when an output file is registered
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.PreOutputWritten">
            <summary>
                Raised prior to an output being written to disk
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.CodeTemplate.ReferenceRegistered">
            <summary>
            Occurs when a reference is registered.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeTemplateWriter.Indent">
            <summary>
            Increments the IndentLevel by one.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateWriter.IndentLevel">
            <summary>
            The number of tabs or spaces the generated output should indent.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.CodeTemplateWriter.IndentValue">
            <summary>
            This value is outputted once for each Indent Level. IndentValue defaults to one tab.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.NotCheckedAttribute">
            <summary>
            Excludes a property from being required.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OptionalAttribute">
            <summary>
            Marks a property as optional.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputFile">
            <summary>
            A class representing a template output file.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="dependentUpon">The file that output is dependent upon.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputFile"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="dependentUpon">The file that output is dependent upon.</param>
            <param name="metadata">The metadata.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.op_Implicit(System.String)~CodeSmith.Engine.OutputFile">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:CodeSmith.Engine.OutputFile"/>.
            </summary>
            <param name="outputFile">The output file.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:CodeSmith.Engine.OutputFile.op_Implicit(CodeSmith.Engine.OutputFile)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:CodeSmith.Engine.OutputFile"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="outputFile">The output file.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.OutputFileName">
            <summary>
            Gets the name of the output file.
            </summary>
            <value>The name of the output file.</value>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.DependentUpon">
            <summary>
            Gets or sets the dependent upon file.
            </summary>
            <value>The dependent upon file.</value>
        </member>
        <member name="P:CodeSmith.Engine.OutputFile.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>The metadata.</value>
        </member>
        <member name="T:CodeSmith.Engine.ItemRegisteredEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.ItemRegisteredEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.ItemRegisteredEventArgs"/> class.
            </summary>
            <param name="itemName">Name of the item.</param>
        </member>
        <member name="P:CodeSmith.Engine.ItemRegisteredEventArgs.ItemName">
            <summary>
            Gets or sets the name of the item.
            </summary>
            <value>The name of the item.</value>
        </member>
        <member name="T:CodeSmith.Engine.OutputCancelEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputRegisteredEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputRegisteredEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputRegisteredEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="M:CodeSmith.Engine.OutputRegisteredEventArgs.#ctor(CodeSmith.Engine.OutputFile)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputRegisteredEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="P:CodeSmith.Engine.OutputRegisteredEventArgs.OutputFile">
            <summary>
            Gets or sets the output file.
            </summary>
            <value>The output file.</value>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
            <param name="outputFile"></param>
        </member>
        <member name="M:CodeSmith.Engine.OutputCancelEventArgs.#ctor(CodeSmith.Engine.OutputFile)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.OutputCancelEventArgs"/> class.
            </summary>
            <param name="outputFile">The output file.</param>
        </member>
        <member name="P:CodeSmith.Engine.OutputCancelEventArgs.Cancel">
            <summary>
            Gets or sets a value indicating whether this output is canceled
            </summary>
            <value><c>true</c> if cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:CodeSmith.Engine.OutputCancelEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.OutputRegisteredEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Progress">
            <summary>
            Progress information.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Progress.PerformStep">
            <summary>
            Performs a progress step.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Progress.Increment(System.Int32)">
            <summary>
            Increments the current progress value by the specified amount.
            </summary>
            <param name="value">Value.</param>
        </member>
        <member name="E:CodeSmith.Engine.Progress.OnProgress">
            <summary>
            Occurs when the progress value has been changed.
            </summary>
        </member>
        <member name="E:CodeSmith.Engine.Progress.OnStatusChanged">
            <summary>
            Occurs when the progress value has been changed.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Status">
            <summary>
            Current status for the operation.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.MinimumValue">
            <summary>
            Minimum progress value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.MaximumValue">
            <summary>
            Maximum progress value.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Value">
            <summary>
            Gets or sets the current progress value.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.Progress.Step">
            <summary>
            Gets or sets the step increment value.
            </summary>
            <value></value>
        </member>
        <member name="T:CodeSmith.Engine.ValidationError">
            <summary>
            Provides information about a template validation error.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ValidationError.Message">
            <summary>
            The Validation Message
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.ValidationError.PropertyName">
            <summary>
            The name of the Property.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorCompleteEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> generation was successful.</param>
            <param name="registeredOutputs">The registered outputs.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile},System.Collections.Generic.ICollection{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="registeredOutputs">The registered outputs.</param>
            <param name="registeredReferences">The registered references.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Boolean,System.Collections.Generic.ICollection{CodeSmith.Engine.OutputFile},System.Collections.Generic.ICollection{System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="result">if set to <c>true</c> [result].</param>
            <param name="registeredOutputs">The registered outputs.</param>
            <param name="registeredReferences">The registered references.</param>
            <param name="cspFileName">The file path of the CodeSmith project file.</param>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorCompleteEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.GeneratorCompleteEventArgs"/> class.
            </summary>
            <param name="error">The error.</param>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorCompleteEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorErrorEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.GeneratorErrorEventArgs.#ctor(System.String,System.Boolean,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
                Use this constructor to initialize the event arguments
                object with the custom event fields
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorErrorEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorProgressEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.MessageEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.MessageEventArgs.#ctor(System.String)">
            <summary>
                Use this constructor to initialize the event arguments
                object with the custom event fields
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.MessageEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.GeneratorProgressEventArgs">
            <summary>
                EventArgs derived type which holds the custom event fields
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.CodeSmithLicense._licenseUsageCountsChecked">
            <summary>
            This ensures that if the licensing is reset during runtime, that this is only ever incremented once.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithLicense.CheckForFeaturesNotAllowed">
            <summary>
            This method checks to see if you are using invalid features of CodeSmith.
            E.G. You are using CodeSmith Professional and register a CodeSmith Standard Key.
                 This will cause CodeSmith Generator Studio to close.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.TrialRegistrationPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodeSmith.Engine.Map.GetMapFiles">
            <summary>
            Gets the map files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.Load(System.String)">
            <summary>
            Loads the specified name.
            </summary>
            <param name="fullPath">The path.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.LoadFromName(System.String,System.String)">
            <summary>
            Loads the map with the specified name by trying to resolve the path.
            </summary>
            <param name="name">The name of the map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.LoadMergedFromName(System.String,System.String)">
            <summary>
            Loads the map with the specified name by merging any maps with this name found in the global map folder and local template folders.
            </summary>
            <param name="name">The name of the map.</param>
            <param name="baseDirectory">The base directory.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Map.TryResolvePath(System.String,System.String,System.String@)">
            <summary>
            Tries the resolve path.
            </summary>
            <param name="mapName">Name of the map.</param>
            <param name="baseDirectory">The base directory.</param>
            <param name="fullPath">The full path.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="caseSensitive">Whether map lookups should be case sensitive or not.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> the key and value will be reversed.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.MapCollection"/> class.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> the key and value will be reversed.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Merge(CodeSmith.Engine.MapCollection)">
            <summary>
            Merges two maps, any duplicates in the current map will be overridden.
            </summary>
            <param name="source">The source MapCollection.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Save(System.String)">
            <summary>
            Saves the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Load(System.String)">
            <summary>
            Loads the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Load(System.String,System.Boolean)">
            <summary>
            Loads the specified map file name.
            </summary>
            <param name="mapFileName">Name of the map file.</param>
            <param name="reverse">if set to <c>true</c> [reverse].</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Add(System.String,System.String)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</param>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.ContainsValue(System.String)">
            <summary>
            Determines whether the specified value contains value.
            </summary>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value contains value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Remove(System.String)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if key was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.TryGetValue(System.String,System.String@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.OnDeserialization(System.Object)">
            <summary>
            Runs when the entire object graph has been deserialized.
            </summary>
            <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"></see>) for this serialization.</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:CodeSmith.Engine.MapCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#String}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.FileName">
            <summary>
            Gets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.CaseSensitive">
            <summary>
            Whether the map lookups should be case Sensitive.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Reversed">
            <summary>
            Gets a value indicating whether this <see cref="T:CodeSmith.Engine.MapCollection"/> key value pair is reversed.
            </summary>
            <value><c>true</c> if reversed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.ReturnKeyWhenNotFound">
            <summary>
            Gets or sets a value indicating whether to return the key when its not found in the collection.
            </summary>
            <value><c>true</c> to return the key; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.DefaultValue">
            <summary>
            Gets or sets the default value for when the key is not found.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Item(System.String,System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2"></see>.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"></see> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2"></see>.</returns>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#IDictionary#Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:CodeSmith.Engine.MapCollection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="T:CodeSmith.Engine.IMergeStrategy">
            <summary>
            This interface can be implemented to create a merge strategy.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.IMergeStrategy.Init(System.String)">
            <summary>
            Initialize the merge strategy by passing in an initialization String.
            </summary>
            <param name="init">Initialization String.</param>
        </member>
        <member name="M:CodeSmith.Engine.IMergeStrategy.Merge(CodeSmith.Engine.MergeContext)">
            <summary>
            Merge the template output with the existing content.
            </summary>
            <param name="context">A reference to the MergeContext.</param>
            <returns></returns>
        </member>
        <member name="T:CodeSmith.Engine.InsertRegionMergeStrategy">
            <summary>
            This merge strategy can be used to insert the template output into a named region inside an existing file
            and preserve the rest of the content in the file.  The initialization string should be of the format:
            "RegionName=&lt;RegionName&gt;;Language=&lt;Language&gt;"
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.PreserveRegionsMergeStrategy">
            <summary>
            This merge strategy can be used to preserve designated custom regions inside an existing file and
            regenerate the rest of the content in the file.  The initialization string should be of the format:
            "RegionNameRegex=&lt;RegexExpression&gt;;Language=&lt;Language&gt;"
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.E_InvalidTrialKeyOrFailure">
            <summary>
              Looks up a localized string similar to The trial key is invalid. Please try again or contact customer service for assistance..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.E_MustUseRegister">
            <summary>
              Looks up a localized string similar to The key you entered appears to be a full license key.  Please use the Register button to register your license..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_GetTrialKey">
            <summary>
              Looks up a localized string similar to Request Trial Key.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialKey">
            <summary>
              Looks up a localized string similar to Trial Key.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialNotice">
            <summary>
              Looks up a localized string similar to Please enter your {0} trial key and click Try.  If you do not have a trial key, please click the Request Trial Key link on the left.  If you already have a license, click the Register button below..
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Properties.Resources.UI_TrialTitle">
            <summary>
              Looks up a localized string similar to Enter Trial Key.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.IPropertyRefresher">
            <summary>
            Interface that all property refreshers must implement.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.PropertyRefresherContext">
            <summary>
            Context information passed into the IPropertyRefresher methods.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.PropertyInfo">
            <summary>
            The property that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.Instance">
            <summary>
            The CodeTemplate instance that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertyRefresherContext.WorkingDirectory">
            <summary>
            The working directory for resolving and creating relative paths.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveFile(System.String)">
            <summary>
            Saves the project to a file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveFile(System.String,System.Boolean)">
            <summary>
            Saves the project to a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="relativePaths">if set to <c>true</c> make paths relative.</param>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveToString">
            <summary>
            Saves project to String.
            </summary>
            <returns>An XML string of the project.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.SaveToString(System.Boolean)">
            <summary>
            Saves project to String.
            </summary>
            <param name="applyVariables">if set to <c>true</c> apply variables.</param>
            <returns>An XML string of the project.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.MakePathsRelative">
            <summary>
            Makes the paths relative to the directory of <see cref="P:CodeSmith.Engine.Schema.CodeSmithProject.FileName"/>.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.InsertVariables(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Inserts variables into the property set where the value matches.
            </summary>
            <param name="csp">The original project.</param>
            <returns>A new instance of CodeSmithProject.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.ReplaceVariables(CodeSmith.Engine.Schema.CodeSmithProject)">
            <summary>
            Replaces variables in the property set with the variables value.
            </summary>
            <param name="csp">The original project.</param>
            <returns>A new instance of CodeSmithProject.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFile(System.String)">
            <summary>
            Loads the project from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFile(System.String,System.Boolean)">
            <summary>
            Loads the project from a file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="replaceVariables">if set to <c>true</c> replace variables.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFromString(System.String)">
            <summary>
            Loads the project from a String.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.LoadFromString(System.String,System.Boolean)">
            <summary>
            Loads from String.
            </summary>
            <param name="xmlFragment">The XML fragment.</param>
            <param name="replaceVariables">if set to <c>true</c> replace variables.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Schema.CodeSmithProject.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.SingleOutput">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.DefaultTemplate">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.Variables">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.DefaultProperties">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.CodeSmithProject.PropertySets">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.DefaultTemplate.Path">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.ChildNodes">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.Name">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Property.Value">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Properties">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Name">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Enabled">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Output">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.Template">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.MergeType">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.PropertySet.MergeInit">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.SingleOutput.Path">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Variable.Key">
            <remarks/>
        </member>
        <member name="P:CodeSmith.Engine.Schema.Variable.Value">
            <remarks/>
        </member>
        <member name="T:CodeSmith.Engine.PropertySerializerContext">
            <summary>
            Context information passed into the IPropertySerializer methods.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.PropertySerializerContext.#ctor(System.Reflection.PropertyInfo,CodeSmith.Engine.CodeTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.PropertySerializerContext"/> class.
            </summary>
            <param name="propertyInfo">The property that the context points to.</param>
            <param name="instance">The CodeTemplate instance that the context points to.</param>
        </member>
        <member name="M:CodeSmith.Engine.PropertySerializerContext.#ctor(System.Reflection.PropertyInfo,CodeSmith.Engine.CodeTemplate,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.PropertySerializerContext"/> class.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <param name="instance">The instance.</param>
            <param name="workingDirectory">The working directory.</param>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.PropertyInfo">
            <summary>
            The property that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.Instance">
            <summary>
            The CodeTemplate instance that the context points to.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.PropertySerializerContext.WorkingDirectory">
            <summary>
            The working directory for resolving and creating relative paths.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyDirectiveTypeConverter">
            <summary>
            This class can be used to convert to and from an XmlNode for a class that supports XML serialization.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyFilePicker">
            <summary>
            This type editor can be used on a class that supports XML serialization to allow the user to pick an XML file and have that XML file deserialized into the target class.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlPropertyTypeConverter">
            <summary>
            This class can be used to convert to and from an XmlNode for a class that supports XML serialization.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.XmlSchemaFilePicker">
            <summary>
            Allows you to browse for an XSD Schema.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1">
            <summary>
            The AdoHelper class is intended to encapsulate high performance, scalable best practices for
            common data access uses.
            </summary>
            <typeparam name="TFactory">The type of the factory.</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Object)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="value">The value of the specified parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="direction">The System.Data.ParameterDirection of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter(System.String,System.Data.DbType,System.Int32,System.String,System.Data.DataRowVersion)">
            <summary>
            Get an IDataParameter for use in a SQL command
            </summary>
            <param name="name">The name of the parameter to create</param>
            <param name="dbType">The System.Data.DbType of the parameter</param>
            <param name="size">The size of the parameter</param>
            <param name="sourceColumn">The source column of the parameter</param>
            <param name="sourceVersion">The System.Data.DataRowVersion of the parameter</param>
            <returns>An IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AttachParameters(System.Data.IDbCommand,System.Data.IDataParameter[])">
            <summary>
            This method is used to attach array of IDataParameters to an IDbCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of IDataParameterParameters to be added to command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameterCollection,System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an IDataParameterCollection
            </summary>
            <param name="commandParameters">The IDataParameterCollection to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the parameter names are invalid.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AssignParameterValues(System.Data.IDataParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of IDataParameters
            </summary>
            <param name="commandParameters">Array of IDataParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
            <exception cref="T:System.ArgumentException">Thrown if an incorrect number of parameters are passed.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CleanParameterSyntax(System.Data.IDbCommand)">
            <summary>
            This method cleans up the parameter syntax for the provider
            </summary>
            <param name="command">The IDbCommand containing the parameters to clean up.</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.PrepareCommand(System.Data.IDbCommand,System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The IDbCommand to be prepared</param>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ClearCommand(System.Data.IDbCommand)">
            <summary>
            This method clears (if necessary) the connection, transaction, command type and parameters 
            from the provided command
            </summary>
            <remarks>
            Not implemented here because the behavior of this method differs on each data provider. 
            </remarks>
            <param name="command">The IDbCommand to be cleared</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection String. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection String. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <returns>A DataSet containing the resultset generated by the command</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new IDbParameter("@prodid", 24));
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDataset(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            DataSet ds = helper.ExecuteDataset(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <remarks>
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            </remarks>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns no resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns no resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQuery(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection String. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbCommand,CodeSmith.Engine.AdoHelper{`0}.AdoConnectionOwnership)">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection String. 
            </summary>
            <param name="command">The IDbCommand object to use</param>
            <param name="connectionOwnership">Enum indicating whether the connection was created internally or externally.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[],CodeSmith.Engine.AdoHelper{`0}.AdoConnectionOwnership)">
            <summary>
            Create and prepare an IDbCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid IDbConnection, on which to execute this command</param>
            <param name="transaction">A valid IDbTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by AdoHelper</param>
            <returns>IDataReader containing the results of the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection String. 
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(connString, "GetOrders", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(conn, "GetOrders", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example><code>
             IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new IDataParameter("@prodid", 24));
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReader(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            IDataReader dr = helper.ExecuteReader(tran, "GetOrders", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>an IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbCommand)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection String. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection String. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, CommandType.StoredProcedure, "GetOrderCount");
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDbParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalar(System.Data.IDbTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            int orderCount = (int)helper.ExecuteScalar(tran, "GetOrderCount", 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the transaction is rolled back or commmitted</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbCommand,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in 
            the connection String. 
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection String. 
            </summary>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbConnection. 
            </summary>
            <example>
            <code>
            helper.FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="connection">A valid IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute an IDbCommand (that returns a resultset and takes no parameters) against the provided IDbTransaction. 
            </summary>
            <example>
            <code>
            helper.FillDataset(tran, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Execute an IDbCommand (that returns a resultset) against the specified IDbTransaction
            using the provided parameters.
            </summary>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified 
            IDbTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            </remarks>
            <example>
            <code>
            helper.FillDataset(tran, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </code></example>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.FillDataset(System.Data.IDbConnection,System.Data.IDbTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.IDataParameter[])">
            <summary>
            Private helper method that execute an IDbCommand (that returns a resultset) against the specified IDbTransaction and IDbConnection
            using the provided parameters.
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="transaction">A valid IDbTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="dataSet">A DataSet wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of IDataParameters used to execute the command</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.RowUpdating(System.Object,System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            This method consumes the RowUpdatingEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.RowUpdated(System.Object,System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            This method consumes the RowUpdatedEvent and passes it on to the consumer specifed in the call to UpdateDataset
            </summary>
            <param name="obj">The object that generated the event</param>
            <param name="e">The System.Data.Common.RowUpdatingEventArgs</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.SetCommand(System.Data.IDbCommand,System.Boolean@)">
            <summary>
            Set up a command for updating a DataSet.
            </summary>
            <param name="command">command object to prepare</param>
            <param name="mustCloseConnection">output parameter specifying whether the connection used should be closed by the DAAB</param>
            <returns>An IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <example>
            <code>
            helper.UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </code></example>
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.UpdateDataset(System.Data.IDbCommand,System.Data.IDbCommand,System.Data.IDbCommand,System.Data.DataSet,System.String,CodeSmith.Engine.AdoHelper{`0}.RowUpdatingHandler,CodeSmith.Engine.AdoHelper{`0}.RowUpdatedHandler)">
            <summary> 
            Executes the IDbCommand for each inserted, updated, or deleted row in the DataSet also implementing RowUpdating and RowUpdated Event Handlers 
            </summary> 
            <example> 
            <code>
            RowUpdatingEventHandler rowUpdatingHandler = new RowUpdatingEventHandler( OnRowUpdating ); 
            RowUpdatedEventHandler rowUpdatedHandler = new RowUpdatedEventHandler( OnRowUpdated ); 
            helper.UpdateDataSet(sqlInsertCommand, sqlDeleteCommand, sqlUpdateCommand, dataSet, "Order", rowUpdatingHandler, rowUpdatedHandler); 
            </code></example> 
            <param name="insertCommand">A valid SQL statement or stored procedure to insert new records into the data source</param> 
            <param name="deleteCommand">A valid SQL statement or stored procedure to delete records from the data source</param> 
            <param name="updateCommand">A valid SQL statement or stored procedure used to update records in the data source</param> 
            <param name="dataSet">The DataSet used to update the data source</param> 
            <param name="tableName">The DataTable used to update the data source.</param> 
            <param name="rowUpdatingHandler">RowUpdatingEventHandler</param> 
            <param name="rowUpdatedHandler">RowUpdatedEventHandler</param> 
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.String,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if any of the IDataParameters.ParameterNames are null, or if the parameter count does not match the number of values supplied</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if the parameter count does not match the number of values supplied</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.Data.IDbConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example>
            <code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid IDbCommand object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.String,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CreateCommand(System.Data.IDbConnection,System.String,System.Data.CommandType,System.Data.IDataParameter[])">
            <summary>
            Simplify the creation of an IDbCommand object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <example><code>
            IDbCommand command = helper.CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </code></example>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">A valid SQL statement</param>
            <param name="commandType">A System.Data.CommandType</param>
            <param name="commandParameters">The parameters for the SQL statement</param>
            <returns>A valid IDbCommand object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) 
            against the database specified in the connection string using the 
            dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteNonQueryTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns no resultset) against the specified
            IDbTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the paraemter values based on row values.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteDatasetTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A DataSet containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteReaderTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a resultset) against the specified IDbTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A IDataReader containing the resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbCommand,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will assign the parameter values based on parameter order.
            </summary>
            <param name="command">The IDbCommand to execute</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if command is null.</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ExecuteScalarTypedParams(System.Data.IDbTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via an IDbCommand (that returns a 1x1 resultset) against the specified IDbTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid IDbTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if transaction.Connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CheckForReturnValueParameter(System.Object[])">
            <summary>
            Checks for the existence of a return value parameter in the parametervalues
            </summary>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>true if the parameterValues contains a return value parameter, false otherwise</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AreParameterValuesIDataParameters(System.Object[],System.Data.IDataParameter[])">
            <summary>
            Check to see if the parameter values passed to the helper are, in fact, IDataParameters.
            </summary>
            <param name="parameterValues">Array of parameter values passed to helper</param>
            <param name="iDataParameterValues">new array of IDataParameters built from parameter values</param>
            <returns>True if the parameter values are IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameterParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDataConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetSpParameterSetInternal(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSet(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetCachedParameterSetInternal(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSet(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.CacheParameterSetInternal(System.Data.IDbConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connection">A valid IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.DiscoverSpParameterSet(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of IDataParameters for a stored procedure
            </summary>
            <param name="connection">A valid IDbConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if spName is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connection is null</exception>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.m_rowUpdated">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.m_rowUpdating">
            <summary>
            Internal handler used for bubbling up the event to the user
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetConnection(System.String)">
            <summary>
            Returns an IDbConnection object for the given connection string
            </summary>
            <param name="connectionString">The connection string to be used to create the connection</param>
            <returns>An IDbConnection object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetDataAdapter">
            <summary>
            Returns an IDbDataAdapter object
            </summary>
            <returns>The IDbDataAdapter</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.DeriveParameters(System.Data.IDbCommand)">
            <summary>
            Calls the CommandBuilder.DeriveParameters method for the specified provider, doing any setup and cleanup necessary
            </summary>
            <param name="cmd">The IDbCommand referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the Parameters collection of the IDbCommand. </param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetParameter">
            <summary>
            Returns an IDataParameter object
            </summary>
            <returns>The IDataParameter object</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.AddUpdateEventHandlers(System.Data.IDbDataAdapter,CodeSmith.Engine.AdoHelper{`0}.RowUpdatingHandler,CodeSmith.Engine.AdoHelper{`0}.RowUpdatedHandler)">
            <summary>
            Provider specific code to set up the updating/ed event handlers used by UpdateDataset
            </summary>
            <param name="dataAdapter">DataAdapter to attach the event handlers to</param>
            <param name="rowUpdatingHandler">The handler to be called when a row is updating</param>
            <param name="rowUpdatedHandler">The handler to be called when a row is updated</param>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetDataParameters(System.Int32)">
            <summary>
            Returns an array of IDataParameters of the specified size
            </summary>
            <param name="size">size of the array</param>
            <returns>The array of IDataParameters</returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.GetBlobParameter(System.Data.IDbConnection,System.Data.IDataParameter)">
            <summary>
            Handle any provider-specific issues with BLOBs here by "washing" the IDataParameter and returning a new one that is set up appropriately for the provider.
            </summary>
            <param name="connection">The IDbConnection to use in cleansing the parameter</param>
            <param name="p">The parameter before cleansing</param>
            <returns>The parameter after it's been cleansed.</returns>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.RowUpdatedHandler">
            <summary>
            Delegate for creating a RowUpdatedEvent handler
            </summary>
            <param name="sender">The object that published the event</param>
            <param name="e">The RowUpdatedEventArgs for the event</param>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.RowUpdatingHandler">
            <summary>
            Delegate for creating a RowUpdatingEvent handler
            </summary>
            <param name="sender">The object that published the event</param>
            <param name="e">The RowUpdatingEventArgs for the event</param>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by AdoHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership.Internal">
            <summary>Connection is owned and managed by ADOHelper</summary>
        </member>
        <member name="F:CodeSmith.Engine.AdoHelper`1.AdoConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache">
            <summary>
            ADOHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <param name="commandParameters">An array of IDataParameters to be cached</param>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.AdoHelper`1.ADOHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for an IDbConnection</param>
            <param name="commandText">The stored procedure name or SQL command</param>
            <returns>An array of IDataParameters</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if commandText is null</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if connectionString is null</exception>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> class.
            </summary>
            <param name="friendlyName">Name of the friendly.</param>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the
            <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.CreateInstance``1">
            <summary>
            Creates an instance in the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.CreateInstance``1(System.Object[])">
            <summary>
            Creates an instance in the <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <param name="args">The constructor args.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, 
            releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.CodeSmithDomainFactory.NeedCodeSmithDomain">
            <summary>
            Need a <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/>.
            </summary>
            <returns>true if a <see cref="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain"/> is needed.</returns>
        </member>
        <member name="P:CodeSmith.Engine.CodeSmithDomainFactory.CodeSmithDomain">
            <summary>
            Gets the CodeSmith <see cref="T:System.AppDomain"/>.
            </summary>
            <value>The CodeSmith <see cref="T:System.AppDomain"/>.</value>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ExceptionHelper.IsLicenseException(System.Exception)">
            <summary>
            Checks an exception for a licensing related error.
            </summary>
            <param name="ex">The exception</param>
            <returns>Returns true if a licensing exception is found.</returns>
        </member>
        <member name="P:CodeSmith.Engine.Logger.Log">
            <summary>
            Gets the current logger instance or falls back to a default logger.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.PathUtil.RelativePathTo(System.String,System.String)">
            <summary>
            Creates a relative path from one file or folder to another.
            </summary>
            <param name="fromDirectory">Contains the directory that defines the start of the relative path.</param>
            <param name="toPath">Contains the path that defines the endpoint of the relative path.</param>
            <returns>The relative path from the start directory to the end path.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:CodeSmith.Engine.Utility.ProcessStatus">
            <summary>
            Provides enumerated values that indicate the current status of a process.
            </summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Ready">
            <summary>Process is ready to run.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Running">
            <summary>Process is currently running.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Complete">
            <summary>Process is complete.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.Error">
            <summary>Process ran with an error.</summary>
        </member>
        <member name="F:CodeSmith.Engine.Utility.ProcessStatus.TimedOut">
            <summary>Process timed out.</summary>
        </member>
        <member name="T:CodeSmith.Engine.Utility.ProcessBase">
            <summary>
            A base class to run a process.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.Utility.ProcessBase"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.DeleteTempFile(System.String)">
            <summary>
            Deletes the specified temporary file. 
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Execute">
            <summary>
            Runs the exectuable file with the specified task parameters.
            </summary>
            <returns><c>true</c> if the task runs successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.ExecuteTool(System.String,System.String)">
            <summary>
            Runs the executable file. 
            </summary>
            <param name="pathToTool">The path to tool.</param>
            <param name="commandLineCommands">The command line arguments.</param>
            <returns>The returned exit code of the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GenerateCommandLineCommands">
            <summary>
            Generates the command line arguments.
            </summary>
            <returns>Returns a string value containing the command line arguments to pass directly to the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GenerateFullPathToTool">
            <summary>
            Generates the full path to tool.
            </summary>
            <returns>Returns the fully qualified path to the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.GetWorkingDirectory">
            <summary>
            Gets the working directory.
            </summary>
            <returns>Returns the directory in which to run the executable file.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.SkipTaskExecution">
            <summary>
            Indicates whether task execution should be skipped. 
            </summary>
            <returns><c>true</c> to skip task execution; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.ValidateParameters">
            <summary>
            Indicates whether all task parameters are valid. 
            </summary>
            <returns><c>true</c> if all task parameters are valid; otherwise, <c>false</c>c>.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.AppendStandardError(System.String)">
            <summary>
            Appends to the standard error writer.
            </summary>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.ProcessBase.AppendStandardError(System.String,System.Object[])">
            <summary>
            Appends to the standard error writer.
            </summary>
            <param name="format">A composite format String.</param>
            <param name="args">An System.Object array containing zero or more objects to format.</param>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.EnvironmentOverride">
            <summary>
            Gets the override value of the PATH environment variable. 
            </summary>
            <value>The override value of the PATH environment variable.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ExitCode">
            <summary>
            Gets the returned exit code of the executable file. 
            </summary>
            <value>The returned exit code of the executable file. </value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.Status">
            <summary>
            Gets the status of the process.
            </summary>
            <value>The status of the process.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardErrorEncoding">
            <summary>
            Gets the Encoding of the standard error stream of the task.
            </summary>
            <value>The Encoding of the standard error stream of the task.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutputEncoding">
            <summary>
            Gets the Encoding of the standard output stream of the task.
            </summary>
            <value>The Encoding of the standard output stream of the task.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.Timeout">
            <summary>
            Gets or sets the amount of time after which the task executable is terminated. 
            </summary>
            <value>The amount of time after which the task executable is terminated.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ToolName">
            <summary>
            Gets the name of the executable file to run. 
            </summary>
            <value>The name of the executable file to run.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.ToolPath">
            <summary>
            Gets or sets the path of the executable file to run.
            </summary>
            <value>The path of the executable file to run.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutput">
            <summary>
            Gets the standard output stream.
            </summary>
            <value>The standard output.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardError">
            <summary>
            Gets the standard error stream.
            </summary>
            <value>The standard error.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardErrorWriter">
            <summary>
            Gets or sets the standard error writer.
            </summary>
            <value>The standard error writer.</value>
        </member>
        <member name="P:CodeSmith.Engine.Utility.ProcessBase.StandardOutputWriter">
            <summary>
            Gets or sets the standard output writer.
            </summary>
            <value>The standard output writer.</value>
        </member>
        <member name="T:CodeSmith.Engine.Utility.RegistryUtil">
            <summary>
            Utility class for working with the registry.
            NOTE: At some time it would be nice to add automatic detection to see if values exist in the Wow6432Node keys.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetString(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns null if an error occurred, else returns the string value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Retrieves the specified value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns null if an error occurred, else returns the string value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns 0 if an error occurred, else returns the int value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int32)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns 0 if an error occurred, else returns the int value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns 0 if an error occurred, else returns the long value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int64)">
            <summary>
            Retrieves the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns 0 if an error occurred, else returns the long value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns false if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns false if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBinary(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns null if an error occurred, else returns the byte[] value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetBinary(Microsoft.Win32.RegistryKey,System.String,System.String,System.Byte[])">
            <summary>
            Retrieves the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns null if an error occurred, else returns the byte[] value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <returns>Returns DateTime.Min if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String,System.DateTime)">
            <summary>
            Retrieves the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="defaultValue">The value to return if the key does not exist.</param>
            <returns>Returns DateTime.Min if an error occurred, else returns the value for the specified key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.GetValueType(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Retrieves the type of the specified Registry value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value type for the specified key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetString(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Sets or creates the specified String value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetDWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int32)">
            <summary>
            Sets or creates the specified DWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetQWORD(Microsoft.Win32.RegistryKey,System.String,System.String,System.Int64)">
            <summary>
            Sets or creates the specified QWORD value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetBoolean(Microsoft.Win32.RegistryKey,System.String,System.String,System.Boolean)">
            <summary>
            Sets or creates the specified Boolean value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetBinary(Microsoft.Win32.RegistryKey,System.String,System.String,System.Byte[])">
            <summary>
            Sets or creates the specified Binary value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SetDateTime(Microsoft.Win32.RegistryKey,System.String,System.String,System.DateTime)">
            <summary>
            Sets or creates the specified DateTime value.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
            <param name="value">Sets this value to the key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CreateSubKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Creates a new subkey or opens an existing subkey.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns the opened subkey if it could be opened, else returns null.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.DeleteSubKeyTree(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Deletes a subkey and any child subkeys recursively.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Deletes this key under the supplied RegistryKey.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.DeleteValue(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Deletes the specified value from this (current) key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Sets the value for the specified key name.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.RenameSubKey(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Renames a registry key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="destinationSubKey">Then name of the new SubKey.</param>
            <returns>The new SubKey.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CopySubKey(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Copies a registry key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="destinationSubKey">Then name of the destination SubKey.</param>
            <returns>The newly copied SubKey.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CopyHiveKeyRecursively(Microsoft.Win32.RegistryKey,Microsoft.Win32.RegistryKey)">
            <summary>
            Copies a HiveKey Recursively.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="destinationHiveKey">Then name of the destination HiveKey.</param>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Count(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves the number of values in the specified Registry hive.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns the number of sub keys, else returns 0.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Count(Microsoft.Win32.RegistryKey,System.String,System.Boolean)">
            <summary>
            Retrieves the number of values in the specified Registry hive.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="useSubKeyCount"></param>
            <returns>Returns the number of sub keys, else returns 0.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Exists(Microsoft.Win32.RegistryKey,System.String,System.String)">
            <summary>
            Checks to see if a subkey exists.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">If the name is specified then it will check to see if this value exists.</param>
            <returns>Returns false if the key wasn't found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Find(Microsoft.Win32.RegistryKey,System.String,System.String,System.String)">
            <summary>
            Finds a specific key one level deep from the hivekey.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            <param name="name">Gets the value for the specified key.</param>
            <param name="value">Value to check.</param>
            <returns>The SubKey name if found; returns String.Empty if not found.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.Keys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves all key names under a given hive key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            /// <returns>Retrieves all key names under a given hive key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.SubKeys(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Retrieves all subkeys under a given hive key.
            </summary>
            <param name="hiveKey">The RegistryKey that the sub key exists in.</param>
            <param name="subKey">Opens this key under the supplied RegistryKey.</param>
            /// <returns>Retrieves all subkeys under a given hive key.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.NextSubKey(Microsoft.Win32.RegistryKey)">
            <summary>
             Returns the next available index in a list of registry sub keys.
            </summary>
            <param name="hiveKey">The hive key.</param>
            <returns>Returns the next number in an indexed list.</returns>
        </member>
        <member name="M:CodeSmith.Engine.Utility.RegistryUtil.CreateCodeSmithKey">
            <summary>
            create the root CodeSmith RegistryKey.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.Message">
            <summary>
            This is the Error message, it will be null unless an error occurred.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.RootKey">
            <summary>
            Returns the root CodeSmith RegistryKey (E.G Software\CodeSmith).
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.Utility.RegistryUtil.Key">
            <summary>
            Returns the CodeSmith RegistryKey (E.G Software\CodeSmith\v6.x).
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.SafeDataReader">
            <summary>
            This is a DataReader that 'fixes' any null values before
            they are returned to our business code.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            Initializes the SafeDataReader object to use data from
            the provided DataReader object.
            </summary>
            <param name="dataReader">The source DataReader object containing the data.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetString(System.Int32)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValue(System.Int32)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt32(System.Int32)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDouble(System.Int32)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetGuid(System.Int32)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Read">
            <summary>
            Reads the next row of data from the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.NextResult">
            <summary>
            Moves to the next result set in the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Close">
            <summary>
            Closes the datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetByte(System.Int32)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChar(System.Int32)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetData(System.Int32)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFieldType(System.Int32)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFloat(System.Int32)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt16(System.Int32)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt64(System.Int32)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetName(System.Int32)">
            <summary>
            Invokes the GetName method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetOrdinal(System.String)">
            <summary>
            Gets an ordinal value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetSchemaTable">
            <summary>
            Invokes the GetSchemaTable method of the underlying datareader.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValues(System.Object[])">
            <summary>
            Invokes the GetValues method of the underlying datareader.
            </summary>
            <param name="values">An array of System.Object to
            copy the values into.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.IsDBNull(System.Int32)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Dispose">
            <summary>
            Disposes the object.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Dispose(System.Boolean)">
            <summary>
            Disposes the object.
            </summary>
            <param name="disposing">True if called by
            the public Dispose method.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.Finalize">
            <summary>
            Object finalizer.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetString(System.String)">
            <summary>
            Gets a string value from the datareader.
            </summary>
            <remarks>
            Returns empty string for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetValue(System.String)">
            <summary>
            Gets a value of type <see cref="T:System.Object"/> from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt32(System.String)">
            <summary>
            Gets an integer from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDouble(System.String)">
            <summary>
            Gets a double from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetGuid(System.String)">
            <summary>
            Gets a Guid value from the datareader.
            </summary>
            <remarks>
            Returns Guid.Empty for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBoolean(System.String)">
            <summary>
            Gets a boolean value from the datareader.
            </summary>
            <remarks>
            Returns <see langword="false" /> for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetByte(System.String)">
            <summary>
            Gets a byte value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetBytes(System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetBytes method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChar(System.String)">
            <summary>
            Gets a char value from the datareader.
            </summary>
            <remarks>
            Returns Char.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetChars(System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Invokes the GetChars method of the underlying datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
            <param name="buffer">Array containing the data.</param>
            <param name="bufferOffset">Offset position within the buffer.</param>
            <param name="fieldOffset">Offset position within the field.</param>
            <param name="length">Length of data to read.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetData(System.String)">
            <summary>
            Invokes the GetData method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDataTypeName(System.String)">
            <summary>
            Invokes the GetDataTypeName method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDateTime(System.String)">
            <summary>
            Gets a date value from the datareader.
            </summary>
            <remarks>
            Returns DateTime.MinValue for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetDecimal(System.String)">
            <summary>
            Gets a decimal value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFieldType(System.String)">
            <summary>
            Invokes the GetFieldType method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetFloat(System.String)">
            <summary>
            Gets a Single value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt16(System.String)">
            <summary>
            Gets a Short value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.GetInt64(System.String)">
            <summary>
            Gets a Long value from the datareader.
            </summary>
            <remarks>
            Returns 0 for null.
            </remarks>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="M:CodeSmith.Engine.SafeDataReader.IsDBNull(System.String)">
            <summary>
            Invokes the IsDBNull method of the underlying datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.DataReader">
            <summary>
            Get a reference to the underlying data reader
            object that actually contains the data from
            the data source.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Depth">
            <summary>
            Returns the depth property value from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.FieldCount">
            <summary>
            Returns the FieldCount property from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.IsClosed">
            <summary>
            Returns the IsClosed property value from the datareader.
            </summary>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Item(System.String)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="name">Name of the column containing the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.Item(System.Int32)">
            <summary>
            Returns a value from the datareader.
            </summary>
            <param name="i">Ordinal column position of the value.</param>
        </member>
        <member name="P:CodeSmith.Engine.SafeDataReader.RecordsAffected">
            <summary>
            Returns the RecordsAffected property value from the underlying datareader.
            </summary>
        </member>
        <member name="T:CodeSmith.Engine.SerializableDictionary`2">
            <summary>
            Represents a xml serializable collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="dictionary">The dictionary.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="capacity">The capacity.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:CodeSmith.Engine.SerializableDictionary`2"/> class.
            </summary>
            <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> object containing the information required to serialize the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
            <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext"/> structure containing the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#GetSchema">
            <summary>
            This property is reserved, apply the 
            <see cref="T:XmlSchemaProviderAttribute" /> to the class instead.
            </summary>
            <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" />
            that describes the XML representation of the object that 
            is produced by the <see cref="M:IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the <see cref="M:IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" />
            stream from which the object is deserialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.SerializableDictionary`2.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" />
            stream to which the object is serialized.</param>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsPlural(System.String)">
            <summary>
            Determines if a string is in plural form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the value is plural</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsPlural(System.String,System.String)">
            <summary>
            Determines if a string is in plural form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <param name="pluralOverridesMapFile">The name of the plural overrides mapping file.</param>
            <returns>True, if the value is plural</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsPlural(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Determines if a string is in plural form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns>True, if the value is plural</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsSingular(System.String)">
            <summary>
            Determines if a string is in singular form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <returns>True, if the value is singular</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsSingular(System.String,System.String)">
            <summary>
            Determines if a string is in singular form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <param name="pluralOverridesMapFile">The name of the plural overrides mapping file.</param>
            <returns>True, if the value is singular</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsSingular(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Determines if a string is in singular form based on some simple rules.
            </summary>
            <param name="value">The value to check.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns>True, if the value is singular</returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String,System.String)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMapFile">The plural overrides map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPlural(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Converts a string to plural based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String,System.String)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMapFile">The plural overrides map file.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSingular(System.String,CodeSmith.Engine.MapCollection)">
            <summary>
            Converts a string to singular based on some simple rules.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="pluralOverridesMap">The plural overrides map.</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToCamelCase(System.String)">
            <summary>
            Converts a string to use camelCase.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToPascalCase(System.String)">
            <summary>
            Converts a string to use PascalCase.
            </summary>
            <param name="value">Text to convert</param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSpacedWords(System.String)">
            <summary>
            Takes a NameIdentifier and spaces it out into words "Name Identifier".
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ContainsSpace(System.String)">
            <summary>
            Determines if a string value contains a space.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ContainsString(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines if a string value contains any of the strings passed in.
            </summary>
            <param name="source"></param>
            <param name="wordList"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.IsNumeric(System.String)">
            <summary>
            Determines if a string is a numeric value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.AppendOrdinalSuffix(System.String)">
            <summary>
            Takes a number and appends the ordinal suffix. ie. 1 = 1st, 13 = 13th.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.AppendOrdinalSuffix(System.Int32)">
            <summary>
            Takes a number and appends the ordinal suffix. ie. 1 = 1st, 13 = 13th.
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.StringUtil.ToSameCase(System.String,System.String)">
            <summary>
            Ensures that the value has the same casing as the original value.
            </summary>
            <param name="original"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:CodeSmith.Engine.Util.TryGetValue(System.Reflection.PropertyInfo,System.Object,System.Object[])">
            <summary>
            Safely returns a value if GetValue succeeded, otherwise it returns null.
            </summary>
            <param name="property">The Source Property</param>
            <param name="value">The object whose property value will be returned.</param>
            <param name="index">Optional index values for indexed properties. This value should be null for non-indexed properties.</param>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetLatestVersionInfo">
            <summary>
            Gets the latest released version number of CodeSmith that has been released.
            </summary>
            <returns>
            If an internet connection was detected it will return the version information of the latest released version of CodeSmith.
            If an internet connection could not be found then it returns null.
            </returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetCurrentVersion">
            <summary>
            Returns the Assembly file version information for the CodeSmith.Engine assembly.
            </summary>
            <returns>Returns the Assembly file version information for the CodeSmith.Engine assembly.</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetShortVersion">
            <summary>
            Returns the current version information in the following format: 5.2.0000 (Major.Minor.Revision)
            </summary>
            <returns>Returns the current version information in the following format: 5.2.0000 (Major.Minor.Revision)</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetShortBuild">
            <summary>
            Returns the current version information in the following format: 5.2.0000 (Major.Minor.Build)
            </summary>
            <returns>Returns the current version information in the following format: 5.2.0000 (Major.Minor.Build)</returns>
        </member>
        <member name="M:CodeSmith.Engine.VersionCheck.GetVersionNumber">
            <summary>
            Returns the current version information in the following format: 5.2 (Major.Minor)
            </summary>
            <returns>Returns the current version information in the following format: 5.2 (Major.Minor)</returns>
        </member>
    </members>
</doc>
