//------------------------------------------------------------------------------
// <autogenerated>
//     此代码是由 CodeSmith 模板生成的。
//
//     做不该文件的修改内容。更改此
//     如果重新生成代码，文件将会丢失。
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.Entity;
using Abp.EntityFramework;
using CodeSmith.Abp.Template.Test.Core;

// ReSharper disable once CheckNamespace
namespace CodeSmith.Abp.Template.Test.EntityFramework
{
    public partial class YtQdYtsfContext : AbpDbContext
    {
        /* NOTE: 
         *   Setting "Default" to base class helps us when working migration commands on Package Manager Console.
         *   But it may cause problems when working Migrate.exe of EF. If you will apply migrations on command line, do not
         *   pass connection string name to base classes. ABP works either way.
         */
        public YtQdYtsfContext()
            : base("Default")
        {
            InitializeContext();
        }

        /* NOTE:
         *   This constructor is used by ABP to pass connection string defined in QdCaseDataModule.PreInitialize.
         *   Notice that, actually you will not directly create an instance of QdCaseDbContext since ABP automatically handles it.
         */
        public YtQdYtsfContext(string nameOrConnectionString)
            : base(nameOrConnectionString)
        {
            InitializeContext();     
        }

        public DbSet<Bsbutton> Bsbuttons { get; set; }
        public DbSet<Bsdictionary> Bsdictionaries { get; set; }
        public DbSet<Bsmenu> Bsmenus { get; set; }
        public DbSet<Bsmenubutton> Bsmenubuttons { get; set; }
        public DbSet<Bspermission> Bspermissions { get; set; }
        public DbSet<Bsrole> Bsroles { get; set; }
        public DbSet<Bsuser> Bsusers { get; set; }
        public DbSet<Bsuserfeedback> Bsuserfeedbacks { get; set; }
        public DbSet<Bsuseroperatelog> Bsuseroperatelogs { get; set; }
        public DbSet<Cmacquisitionlog> Cmacquisitionlogs { get; set; }
        public DbSet<Cmaddress> Cmaddresses { get; set; }
        public DbSet<Cmaddressconfig> Cmaddressconfigs { get; set; }
        public DbSet<Cmdictionaryconfig> Cmdictionaryconfigs { get; set; }
        public DbSet<Cmsensorinfo> Cmsensorinfos { get; set; }
        public DbSet<Tfclosedwallfacilities> Tfclosedwallfacilities { get; set; }
        public DbSet<Tfclosedwallfeature> Tfclosedwallfeatures { get; set; }
        public DbSet<Tfdrilling> Tfdrillings { get; set; }
        public DbSet<Tfenclosedwallledger> Tfenclosedwallledgers { get; set; }
        public DbSet<Tfgasdrainage> Tfgasdrainages { get; set; }
        public DbSet<Tfgasdrilling> Tfgasdrillings { get; set; }
        public DbSet<Tfkeyhead> Tfkeyheads { get; set; }
        public DbSet<Tfkindlefirewall> Tfkindlefirewalls { get; set; }
        public DbSet<Tfmonitorabnormal> Tfmonitorabnormals { get; set; }
        public DbSet<Tfmonitoranalog> Tfmonitoranalogs { get; set; }
        public DbSet<Tfpointclosedwall> Tfpointclosedwalls { get; set; }
        public DbSet<Tfproofread> Tfproofreads { get; set; }
        public DbSet<Tfworkingface> Tfworkingfaces { get; set; }
        public DbSet<Wsclosedwallfeature> Wsclosedwallfeatures { get; set; }
        public DbSet<Wsgas> Wsgas { get; set; }
        public DbSet<Wsoutburstprevention> Wsoutburstpreventions { get; set; }
        public DbSet<Wswork> Wsworks { get; set; }
        public DbSet<Ztconstructionsite> Ztconstructionsites { get; set; }
        public DbSet<Ztfieldiinspection> Ztfieldiinspections { get; set; }
        public DbSet<Zthole> Ztholes { get; set; }
        public DbSet<Ztporeplate> Ztporeplates { get; set; }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            modelBuilder.Configurations.Add(new BsbuttonMap());
            modelBuilder.Configurations.Add(new BsdictionaryMap());
            modelBuilder.Configurations.Add(new BsmenuMap());
            modelBuilder.Configurations.Add(new BsmenubuttonMap());
            modelBuilder.Configurations.Add(new BspermissionMap());
            modelBuilder.Configurations.Add(new BsroleMap());
            modelBuilder.Configurations.Add(new BsuserMap());
            modelBuilder.Configurations.Add(new BsuserfeedbackMap());
            modelBuilder.Configurations.Add(new BsuseroperatelogMap());
            modelBuilder.Configurations.Add(new CmacquisitionlogMap());
            modelBuilder.Configurations.Add(new CmaddressMap());
            modelBuilder.Configurations.Add(new CmaddressconfigMap());
            modelBuilder.Configurations.Add(new CmdictionaryconfigMap());
            modelBuilder.Configurations.Add(new CmsensorinfoMap());
            modelBuilder.Configurations.Add(new TfclosedwallfacilitiesMap());
            modelBuilder.Configurations.Add(new TfclosedwallfeatureMap());
            modelBuilder.Configurations.Add(new TfdrillingMap());
            modelBuilder.Configurations.Add(new TfenclosedwallledgerMap());
            modelBuilder.Configurations.Add(new TfgasdrainageMap());
            modelBuilder.Configurations.Add(new TfgasdrillingMap());
            modelBuilder.Configurations.Add(new TfkeyheadMap());
            modelBuilder.Configurations.Add(new TfkindlefirewallMap());
            modelBuilder.Configurations.Add(new TfmonitorabnormalMap());
            modelBuilder.Configurations.Add(new TfmonitoranalogMap());
            modelBuilder.Configurations.Add(new TfpointclosedwallMap());
            modelBuilder.Configurations.Add(new TfproofreadMap());
            modelBuilder.Configurations.Add(new TfworkingfaceMap());
            modelBuilder.Configurations.Add(new WsclosedwallfeatureMap());
            modelBuilder.Configurations.Add(new WsgasMap());
            modelBuilder.Configurations.Add(new WsoutburstpreventionMap());
            modelBuilder.Configurations.Add(new WsworkMap());
            modelBuilder.Configurations.Add(new ZtconstructionsiteMap());
            modelBuilder.Configurations.Add(new ZtfieldiinspectionMap());
            modelBuilder.Configurations.Add(new ZtholeMap());
            modelBuilder.Configurations.Add(new ZtporeplateMap());

            InitializeMapping(modelBuilder);

	        base.OnModelCreating(modelBuilder);
        }

        partial void InitializeContext();
        partial void InitializeMapping(System.Data.Entity.DbModelBuilder modelBuilder);
    }
}