<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" Path="../../libs" %>
<%@ Assembly Name="CodeSmith.Abp"  Path="../../libs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.Abp" %>
<%@ Import Namespace="CodeSmith.Abp.Extensions" %>
<%@ Import Namespace="CodeSmith.Abp.Model" %>
<%@ Import Namespace="CodeSmith.Abp.Generator" %>

<%@ Property Name="ApplicationNamespace" Type="System.String"  Category="Namespace" Optional="False" %>
<%@ Property Name="Entity"Type="CodeSmith.Abp.Model.Entity" Category="Data" Optional="False" %>
<%@ Property Name="EnumItems"Type="System.Collections.Generic.List<EnumItem>" Category="Data" Optional="True" %>
<% EnumItems = EnumItems ?? new List<EnumItem>(); %>
using System;
using System.Collections.Generic;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;

namespace <%= ApplicationNamespace %>.<%= Entity.TableName.ToPluralPascalCase() %>.Dtos
{
    public partial class <%= Entity.ClassName.ToSafeName() %>Dto
    {
        public <%= Entity.ClassName.ToSafeName() %>Dto()
        {
<% foreach(var p in Entity.Properties.Where(p => !string.IsNullOrEmpty(p.Default))) { %>
<% if(EnumItems.IsHaveEnum(Entity.ClassName,p.ColumnName)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= EnumItems.GetEnumType(Entity.ClassName,p.ColumnName) %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysdatetime|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.Now;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.UtcNow;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysdatetime|sysdatetimeoffset|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.Now;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.UtcNow;
<% } else if(p.SystemType == typeof(Int16) || p.SystemType == typeof(Int32) || p.SystemType == typeof(Int64) || p.SystemType == typeof(byte)) { %>
            <%= p.PropertyName.ToSafeName() %> = <%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(Decimal) || p.SystemType == typeof(Single) || p.SystemType == typeof(Double)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= p.SystemType %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(string)) { %>
            <%= p.PropertyName.ToSafeName() %> = "<%= Regex.Replace(p.Default, @"[\(\)']", "").Trim() %>";
<% } else if(p.SystemType == typeof(bool) && p.Default.Contains("1")) { %>
            <%= p.PropertyName.ToSafeName() %> = true;
<% } // if %>
<% } // foreach %>
        }        
    }
}

