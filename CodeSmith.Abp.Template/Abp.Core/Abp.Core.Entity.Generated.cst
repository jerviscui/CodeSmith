<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>
<%@ Assembly Name="SchemaExplorer" Path="../../libs" %>
<%@ Assembly Name="CodeSmith.Abp"  Path="../../libs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="CodeSmith.Abp" %>
<%@ Import Namespace="CodeSmith.Abp.Extensions" %>
<%@ Import Namespace="CodeSmith.Abp.Model" %>
<%@ Import Namespace="CodeSmith.Abp.Generator" %>

<%@ Property Name="AbpCoreNamespace" Type="System.String"  Category="Namespace" Optional="False" %>
<%@ Property Name="Entity"Type="CodeSmith.Abp.Model.Entity" Category="Data" Optional="False" %>
<%@ Property Name="EnumItems"Type="System.Collections.Generic.List<EnumItem>" Category="Data"  %>
<%--<%
CodeSmith.Abp.Generator.Generator generator = new CodeSmith.Abp.Generator.Generator();
CodeSmith.Abp.Model.EntityContext context =  generator.Generate(SoureDatabase);
Entity Entity = context.Entities.First(t=>t.ClassName=="TFProofread");
//EntityEditableClass  entityEditableClass = this.Create<EntityEditableClass>();
//this.CopyPropertiesTo(entityEditableClass);
//entityEditableClass.Entity = context.Entities.First(t=>t.ClassName=="TFProofread");

%>--%>
<% EnumItems = EnumItems ?? new List<EnumItem>(); %>
//------------------------------------------------------------------------------
// <autogenerated>
//     此代码是由 CodeSmith 模板生成的。
//
//     做不该文件的修改内容。更改此
//     如果重新生成代码，文件将会丢失。
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Abp.Domain.Entities;
using Abp.Domain.Entities.Auditing;
<% foreach(var r in Entity.Relationships) { %>
<% if(r.ThisCardinality == Cardinality.Many) { %>
using <%= AbpCoreNamespace %>.<%= r.OtherEntity.ToSafeName().ToPluralPascalCase() %>;
<% } else { %>
using <%= AbpCoreNamespace %>.<%= r.OtherEntity.ToSafeName().ToPluralPascalCase() %>;
<% } %>
<% } // foreach %>

namespace <%= AbpCoreNamespace %>.<%= Entity.TableName.ToPluralPascalCase() %>
{
    public partial class <%= Entity.ClassName.ToSafeName() %> <%= Entity.ToEntityInterface() %>
    {
        public <%= Entity.ClassName.ToSafeName() %>()
        {
<% foreach(var p in Entity.Properties.Where(p => !string.IsNullOrEmpty(p.Default))) { %>
<% if(EnumItems.IsHaveEnum(Entity.ClassName,p.ColumnName)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= EnumItems.GetEnumType(Entity.ClassName,p.ColumnName) %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysdatetime|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.Now;
<% } else if(p.SystemType == typeof(DateTime) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTime.UtcNow;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysdatetime|sysdatetimeoffset|getdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.Now;
<% } else if(p.SystemType == typeof(DateTimeOffset) && Regex.IsMatch(p.Default, @"(sysutcdatetime|getutcdate)", RegexOptions.IgnoreCase) ) { %>
            <%= p.PropertyName.ToSafeName() %> = DateTimeOffset.UtcNow;
<% } else if(p.SystemType == typeof(Int16) || p.SystemType == typeof(Int32) || p.SystemType == typeof(Int64) || p.SystemType == typeof(byte)) { %>
            <%= p.PropertyName.ToSafeName() %> = <%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(Decimal) || p.SystemType == typeof(Single) || p.SystemType == typeof(Double)) { %>
            <%= p.PropertyName.ToSafeName() %> = (<%= p.SystemType %>)<%= Regex.Replace(p.Default, @"[\(\) ]", "").Trim() %>;
<% } else if(p.SystemType == typeof(string)) { %>
            <%= p.PropertyName.ToSafeName() %> = "<%= Regex.Replace(p.Default, @"[\(\)']", "").Trim() %>";
<% } else if(p.SystemType == typeof(bool) && p.Default.Contains("1")) { %>
            <%= p.PropertyName.ToSafeName() %> = true;
<% } // if %>
<% } // foreach %>
<% foreach(var r in Entity.Relationships.Where(e => e.ThisCardinality == Cardinality.Many)) { %>
            <%= r.ThisPropertyName.ToSafeName() %> = new List<<%= r.OtherEntity.ToSafeName().ToPluralPascalCase() %>.<%= r.OtherEntity.ToSafeName() %>>();
<% } // foreach %>
        }

<% foreach(var p in Entity.Properties.Where(t=>t.ColumnName!="Id")) { %>
        <% if(EnumItems.IsHaveEnum(Entity.ClassName,p.PropertyName)) {%>
        /// <summary>
        /// <%= p.Describe.ToReplaceLin() %>
        /// </summary>        
        public <%= EnumItems.GetEnumType(Entity.ClassName,p.PropertyName) %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <%}else{%>
        /// <summary>
        /// <%= p.Describe %>
        /// </summary>        
        public <%= p.SystemType.ToNullableType(p.IsNullable == true) %> <%= p.PropertyName.ToSafeName() %> { get; set; }
        <%} %>        
<% } // foreach %>

<% foreach(var r in Entity.Relationships) { %>
<% if(r.ThisCardinality == Cardinality.Many) { %>
        public virtual ICollection<<%= r.OtherEntity.ToSafeName().ToPluralPascalCase() %>.<%= r.OtherEntity.ToSafeName() %>> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
<% } else { %>
        public virtual <%= r.OtherEntity.ToSafeName().ToPluralPascalCase() %>.<%= r.OtherEntity.ToSafeName() %> <%= r.ThisPropertyName.ToSafeName() %> { get; set; }
<% } %>
<% } // foreach %>
    }
}

